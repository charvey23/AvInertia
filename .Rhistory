nitt = 130000, thin = 100, burnin = 30000,
verbose = FALSE, ## switch this to TRUE if you feel like it
pr = TRUE, pl = TRUE ## this saves some model output stuff
)
summary(pgls_model_hum_range)
dat_comp$hum_maxspan
max(p-value = 0.03,)
max(dat_comp$hum_maxspan)
min(dat_comp$hum_maxspan)
dat_comp$CGy_elb_p
max(dat_comp$CGy_elb_p)
max(dat_comp$CGy_elb_etap)
min(dat_comp$CGy_elb_etap)
min(dat_comp$CGy_sp_elb_etap)
min(dat_comp$CGy_sp_elb_p)
max(dat_comp$CGy_sp_elb_p)
# ---------- Full Bird CG -----------
# Full bird CGx range due to elbow and wrist
max(dat_comp$range_CGx)
max(dat_comp$range_CGx_specific)
dat_comp$species[which.max(dat_comp$range_CGx)]
dat_comp$species[which.max(dat_comp$range_CGx_specific)]
# Full bird CGz range due to elbow and wrist
max(dat_comp$range_CGz)
max(dat_comp$range_CGz_specific)
dat_comp$species[which.max(dat_comp$range_CGz)]
dat_comp$species[which.max(dat_comp$range_CGz_specific)]
dat_comp$range_CGz[which.max(dat_comp$range_CGz_specific)]
dat_comp$CGx_elb
dat_comp$CGx_man
plot(dat_comp$CGx_sp_elb,dat_comp$CGx_sp_man)
dat_comp$species[which.min(dat_comp$CGx_sp_elb)]
plot(dat_comp$CGx_sp_elb,dat_comp$CGx_sp_elb_etap)
plot(dat_comp$CGx_sp_man,dat_comp$CGx_sp_man_etap)
plot(dat_comp$CGz_sp_elb,dat_comp$CGz_sp_man)
dat_comp[,c("species","CGz_sp_elb")]
dat_comp[,c("species","CGz_sp_elb","CGz_sp_man")]
plot(elbow,full_CGz_specific_orgDorsal, data = subset(dat_final, species == "cho_min"))
plot(subset(dat_final, species == "cho_min")$elbow,subset(dat_final, species == "cho_min")$full_CGz_specific_orgDorsal)
plot(subset(dat_final, species == "cho_min")$elbow,subset(dat_final, species == "cho_min")$full_CGz_specific_orgDorsal, col = subset(dat_final, species == "cho_min")$BirdID)
plot(subset(dat_final, species == "cho_min")$elbow,subset(dat_final, species == "cho_min")$full_CGz_specific_orgDorsal, col = as.factor(subset(dat_final, species == "cho_min")$BirdID))
plot(subset(dat_final, species == "cho_min")$elbow,subset(dat_final, species == "cho_min")$full_CGz_specific_orgDorsal, col = as.factor(subset(dat_final, species == "cho_min")$BirdID_FrameSpec))
plot(subset(dat_final, species == "col_liv")$elbow,subset(dat_final, species == "col_liv")$full_CGz_specific_orgDorsal, col = as.factor(subset(dat_final, species == "col_liv")$BirdID))
plot(subset(dat_final, species == "col_liv")$elbow,subset(dat_final, species == "col_liv")$full_CGz_specific_orgDorsal, col = as.factor(subset(dat_final, species == "col_liv")$BirdID_FrameSpec))
plot(subset(dat_final, species == "col_liv")$elbow,subset(dat_final, species == "col_liv")$full_CGz_specific_orgDorsal, col = as.factor(subset(dat_final, species == "col_liv")$BirdID))
plot(subset(dat_final, species == "cho_min")$elbow,subset(dat_final, species == "cho_min")$full_CGz_specific_orgDorsal, col = as.factor(subset(dat_final, species == "cho_min")$BirdID))
plot(subset(dat_final, species == "cho_min")$elbow,subset(dat_final, species == "cho_min")$full_CGz_specific_orgDorsal, col = as.factor(subset(dat_final, species == "cho_min")$BirdID_FrameSpec))
plot(subset(dat_final, species == "cho_min")$elbow,subset(dat_final, species == "cho_min")$manus, col = as.factor(subset(dat_final, species == "cho_min")$BirdID_FrameSpec))
plot(subset(dat_final, species == "cho_min")$elbow,subset(dat_final, species == "cho_min")$manus, col = as.factor(subset(dat_final, species == "cho_min")$BirdID))
plot(subset(dat_final, species == "cho_min")$elbow,subset(dat_final, species == "cho_min")$manus, col = as.factor(subset(dat_final, species == "cho_min")$BirdID_FrameSpec))
plot(subset(dat_final, species == "cho_min")$elbow,subset(dat_final, species == "cho_min")$pt8_X, col = as.factor(subset(dat_final, species == "cho_min")$BirdID_FrameSpec))
plot(subset(dat_final, species == "cho_min")$elbow,subset(dat_final, species == "cho_min")$pt8_Z, col = as.factor(subset(dat_final, species == "cho_min")$BirdID_FrameSpec))
plot(subset(dat_final, species == "cho_min")$elbow,subset(dat_final, species == "cho_min")$pt9_Z, col = as.factor(subset(dat_final, species == "cho_min")$BirdID_FrameSpec))
plot(subset(dat_final, species == "cho_min")$elbow,subset(dat_final, species == "cho_min")$pt10_Z, col = as.factor(subset(dat_final, species == "cho_min")$BirdID_FrameSpec))
plot(subset(dat_final, species == "cho_min")$elbow,subset(dat_final, species == "cho_min")$pt_Z, col = as.factor(subset(dat_final, species == "cho_min")$BirdID_FrameSpec))
plot(subset(dat_final, species == "cho_min")$elbow,subset(dat_final, species == "cho_min")$pt2_Z, col = as.factor(subset(dat_final, species == "cho_min")$BirdID_FrameSpec))
plot(subset(dat_final, species == "cho_min")$elbow,subset(dat_final, species == "cho_min")$pt12_Z, col = as.factor(subset(dat_final, species == "cho_min")$BirdID_FrameSpec))
plot(subset(dat_final, species == "col_liv")$elbow,subset(dat_final, species == "col_liv")$pt12_Z, col = as.factor(subset(dat_final, species == "col_liv")$BirdID_FrameSpec))
plot(subset(dat_final, species == "cho_min")$elbow,subset(dat_final, species == "cho_min")$pt12_Z, col = as.factor(subset(dat_final, species == "cho_min")$BirdID_FrameSpec))
plot(subset(dat_final, species == "cho_min")$elbow,subset(dat_final, species == "cho_min")$pt12_Z, col = as.factor(subset(dat_final, species == "cho_min")$BirdID))
plot(subset(dat_final, species == "cho_min")$elbow,subset(dat_final, species == "cho_min")$pt12_Z, col = as.factor(subset(dat_final, species == "cho_min")$BirdID_FrameSpec))
plot(subset(dat_final, species == "cho_min")$elbow,subset(dat_final, species == "cho_min")$pt11_Z, col = as.factor(subset(dat_final, species == "cho_min")$BirdID))
plot(subset(dat_final, species == "cho_min")$elbow,subset(dat_final, species == "cho_min")$pt8_Z, col = as.factor(subset(dat_final, species == "cho_min")$BirdID))
plot(subset(dat_wing, species == "cho_min")$elbow,subset(dat_wing, species == "cho_min")$pt8_Z, col = as.factor(subset(dat_wing, species == "cho_min")$BirdID))
plot(subset(dat_wing, species == "cho_min")$elbow,subset(dat_wing, species == "cho_min")$pt10_Z, col = as.factor(subset(dat_wing, species == "cho_min")$BirdID))
plot(subset(dat_wing, species == "meg_alc")$elbow,subset(dat_wing, species == "meg_alc")$pt10_Z, col = as.factor(subset(dat_wing, species == "meg_alc")$BirdID))
plot(subset(dat_wing, species == "cho_min")$elbow,subset(dat_wing, species == "cho_min")$pt1_Z, col = as.factor(subset(dat_wing, species == "cho_min")$BirdID))
plot(subset(dat_wing, species == "cho_min")$elbow,subset(dat_wing, species == "cho_min")$pt10_Z, col = as.factor(subset(dat_wing, species == "cho_min")$BirdID))
plot(subset(dat_wing, species == "cho_min")$elbow,subset(dat_wing, species == "cho_min")$pt9_Z, col = as.factor(subset(dat_wing, species == "cho_min")$BirdID))
plot(subset(dat_wing, species == "cho_min")$elbow,subset(dat_wing, species == "cho_min")$pt1_Z, col = as.factor(subset(dat_wing, species == "cho_min")$BirdID))
plot(subset(dat_wing, species == "cho_min")$elbow,subset(dat_wing, species == "cho_min")$pt11_Z, col = as.factor(subset(dat_wing, species == "cho_min")$BirdID))
plot(subset(dat_wing, species == "cho_min")$elbow,subset(dat_wing, species == "cho_min")$pt12_Z, col = as.factor(subset(dat_wing, species == "cho_min")$BirdID))
plot(subset(dat_wing, species == "cho_min")$elbow,subset(dat_wing, species == "cho_min")$pt2_Z, col = as.factor(subset(dat_wing, species == "cho_min")$BirdID))
plot(subset(dat_wing, species == "cho_min")$elbow,subset(dat_wing, species == "cho_min")$pt12_Z, col = as.factor(subset(dat_wing, species == "cho_min")$BirdID))
plot(subset(dat_wing, species == "cho_min")$elbow,subset(dat_wing, species == "cho_min")$pt2_Z, col = as.factor(subset(dat_wing, species == "cho_min")$BirdID))
plot(subset(dat_wing, species == "cho_min")$elbow,subset(dat_wing, species == "cho_min")$pt3_Z, col = as.factor(subset(dat_wing, species == "cho_min")$BirdID))
plot(subset(dat_wing, species == "cho_min")$elbow,subset(dat_wing, species == "cho_min")$pt4_Z, col = as.factor(subset(dat_wing, species == "cho_min")$BirdID))
plot(subset(dat_wing, species == "cho_min")$elbow,subset(dat_wing, species == "cho_min")$pt2_Z, col = as.factor(subset(dat_wing, species == "cho_min")$BirdID))
plot(subset(dat_wing, species == "cho_min")$elbow,subset(dat_wing, species == "cho_min")$pt2_Z, col = as.factor(subset(dat_wing, species == "cho_min")$BirdID_FrameSpec))
plot(subset(dat_wing, species == "col_liv")$elbow,subset(dat_wing, species == "col_liv")$pt2_Z, col = as.factor(subset(dat_wing, species == "col_liv")$BirdID_FrameSpec))
dat_wing$species[which.max(subset(dat_wing, species == "col_liv")$pt2_Z)]
subset(dat_wing, species == "col_liv")dat_wing$species[which.max(subset(dat_wing, species == "col_liv")$pt2_Z)]
subset(dat_wing, species == "col_liv")$species[which.max(subset(dat_wing, species == "col_liv")$pt2_Z)]
subset(dat_wing, species == "col_liv")$BirdIDFrameSpec[which.max(subset(dat_wing, species == "col_liv")$pt2_Z)]
subset(dat_wing, species == "col_liv")$BirdID_FrameSpec[which.max(subset(dat_wing, species == "col_liv")$pt2_Z)]
plot(subset(dat_wing, species == "ard_her")$elbow,subset(dat_wing, species == "ard_her")$pt2_Z, col = as.factor(subset(dat_wing, species == "col_liv")$BirdID_FrameSpec))
plot(subset(dat_wing, species == "ard_her")$elbow,subset(dat_wing, species == "ard_her")$pt2_Z, col = as.factor(subset(dat_wing, species == "ard_her")$BirdID_FrameSpec))
plot(subset(dat_wing, species == "ard_her")$elbow,subset(dat_wing, species == "ard_her")$pt2_Z, col = as.factor(subset(dat_wing, species == "ard_her")$BirdID))
plot(subset(dat_wing, species == "ana_pla")$elbow,subset(dat_wing, species == "ana_pla")$pt2_Z, col = as.factor(subset(dat_wing, species == "ana_pla")$BirdID))
plot(subset(dat_wing, species == "ana_pla")$elbow,subset(dat_wing, species == "ana_pla")$pt8_Z, col = as.factor(subset(dat_wing, species == "ana_pla")$BirdID))
plot(subset(dat_wing, species == unique(dat_wing$species)[1])$elbow,subset(dat_wing, species == unique(dat_wing$species)[1])$pt8_Z, col = as.factor(subset(dat_wing, species == unique(dat_wing$species)[1])$BirdID))
plot(subset(dat_wing, species == unique(dat_wing$species)[i])$elbow,subset(dat_wing, species == unique(dat_wing$species)[i])$pt8_Z, col = as.factor(subset(dat_wing, species == unique(dat_wing$species)[i])$BirdID))
i = 2
plot(subset(dat_wing, species == unique(dat_wing$species)[i])$elbow,subset(dat_wing, species == unique(dat_wing$species)[i])$pt8_Z, col = as.factor(subset(dat_wing, species == unique(dat_wing$species)[i])$BirdID))
plot(subset(dat_wing, species == unique(dat_wing$species)[i])$elbow,subset(dat_wing, species == unique(dat_wing$species)[i])$pt2_Z, col = as.factor(subset(dat_wing, species == unique(dat_wing$species)[i])$BirdID))
i = 1
plot(subset(dat_wing, species == unique(dat_wing$species)[i])$elbow,subset(dat_wing, species == unique(dat_wing$species)[i])$pt2_Z, col = as.factor(subset(dat_wing, species == unique(dat_wing$species)[i])$BirdID))
i = 3
plot(subset(dat_wing, species == unique(dat_wing$species)[i])$elbow,subset(dat_wing, species == unique(dat_wing$species)[i])$pt2_Z, col = as.factor(subset(dat_wing, species == unique(dat_wing$species)[i])$BirdID))
unique(dat_wing$species)[i]
i=4
plot(subset(dat_wing, species == unique(dat_wing$species)[i])$elbow,subset(dat_wing, species == unique(dat_wing$species)[i])$pt2_Z, col = as.factor(subset(dat_wing, species == unique(dat_wing$species)[i])$BirdID))
unique(dat_wing$species)[i]
i=5
plot(subset(dat_wing, species == unique(dat_wing$species)[i])$elbow,subset(dat_wing, species == unique(dat_wing$species)[i])$pt2_Z, col = as.factor(subset(dat_wing, species == unique(dat_wing$species)[i])$BirdID))
i=6
plot(subset(dat_wing, species == unique(dat_wing$species)[i])$elbow,subset(dat_wing, species == unique(dat_wing$species)[i])$pt2_Z, col = as.factor(subset(dat_wing, species == unique(dat_wing$species)[i])$BirdID))
plot(subset(dat_wing, species == unique(dat_wing$species)[i])$elbow,subset(dat_wing, species == unique(dat_wing$species)[i])$pt8_Z, col = as.factor(subset(dat_wing, species == unique(dat_wing$species)[i])$BirdID))
i=7
plot(subset(dat_wing, species == unique(dat_wing$species)[i])$elbow,subset(dat_wing, species == unique(dat_wing$species)[i])$pt2_Z, col = as.factor(subset(dat_wing, species == unique(dat_wing$species)[i])$BirdID))
unique(dat_wing$species)[i]
i=8
plot(subset(dat_wing, species == unique(dat_wing$species)[i])$elbow,subset(dat_wing, species == unique(dat_wing$species)[i])$pt2_Z, col = as.factor(subset(dat_wing, species == unique(dat_wing$species)[i])$BirdID))
i=9
plot(subset(dat_wing, species == unique(dat_wing$species)[i])$elbow,subset(dat_wing, species == unique(dat_wing$species)[i])$pt2_Z, col = as.factor(subset(dat_wing, species == unique(dat_wing$species)[i])$BirdID))
i=10
plot(subset(dat_wing, species == unique(dat_wing$species)[i])$elbow,subset(dat_wing, species == unique(dat_wing$species)[i])$pt2_Z, col = as.factor(subset(dat_wing, species == unique(dat_wing$species)[i])$BirdID))
unique(dat_wing$species)[i]
plot(subset(dat_wing, species == unique(dat_wing$species)[i])$elbow,subset(dat_wing, species == unique(dat_wing$species)[i])$pt2_Z, col = as.factor(subset(dat_wing, species == unique(dat_wing$species)[i])$BirdID_Frame))
i=11
plot(subset(dat_wing, species == unique(dat_wing$species)[i])$elbow,subset(dat_wing, species == unique(dat_wing$species)[i])$pt2_Z, col = as.factor(subset(dat_wing, species == unique(dat_wing$species)[i])$BirdID_Frame))
i=12
plot(subset(dat_wing, species == unique(dat_wing$species)[i])$elbow,subset(dat_wing, species == unique(dat_wing$species)[i])$pt2_Z, col = as.factor(subset(dat_wing, species == unique(dat_wing$species)[i])$BirdID_Frame))
i=13
plot(subset(dat_wing, species == unique(dat_wing$species)[i])$elbow,subset(dat_wing, species == unique(dat_wing$species)[i])$pt2_Z, col = as.factor(subset(dat_wing, species == unique(dat_wing$species)[i])$BirdID_Frame))
plot(subset(dat_wing, species == unique(dat_wing$species)[i])$elbow,subset(dat_wing, species == unique(dat_wing$species)[i])$pt8_Z, col = as.factor(subset(dat_wing, species == unique(dat_wing$species)[i])$BirdID_Frame))
i=14
plot(subset(dat_wing, species == unique(dat_wing$species)[i])$elbow,subset(dat_wing, species == unique(dat_wing$species)[i])$pt2_Z, col = as.factor(subset(dat_wing, species == unique(dat_wing$species)[i])$BirdID_Frame))
i=15
plot(subset(dat_wing, species == unique(dat_wing$species)[i])$elbow,subset(dat_wing, species == unique(dat_wing$species)[i])$pt2_Z, col = as.factor(subset(dat_wing, species == unique(dat_wing$species)[i])$BirdID_Frame))
plot(subset(dat_wing, species == unique(dat_wing$species)[i])$elbow,subset(dat_wing, species == unique(dat_wing$species)[i])$pt8_Z, col = as.factor(subset(dat_wing, species == unique(dat_wing$species)[i])$BirdID_Frame))
unique(dat_wing$species)[i]
i=16
plot(subset(dat_wing, species == unique(dat_wing$species)[i])$elbow,subset(dat_wing, species == unique(dat_wing$species)[i])$pt8_Z, col = as.factor(subset(dat_wing, species == unique(dat_wing$species)[i])$BirdID_Frame))
plot(subset(dat_wing, species == unique(dat_wing$species)[i])$elbow,subset(dat_wing, species == unique(dat_wing$species)[i])$pt2_Z, col = as.factor(subset(dat_wing, species == unique(dat_wing$species)[i])$BirdID_Frame))
i=17
plot(subset(dat_wing, species == unique(dat_wing$species)[i])$elbow,subset(dat_wing, species == unique(dat_wing$species)[i])$pt2_Z, col = as.factor(subset(dat_wing, species == unique(dat_wing$species)[i])$BirdID_Frame))
i=18
plot(subset(dat_wing, species == unique(dat_wing$species)[i])$elbow,subset(dat_wing, species == unique(dat_wing$species)[i])$pt2_Z, col = as.factor(subset(dat_wing, species == unique(dat_wing$species)[i])$BirdID_Frame))
i=19
plot(subset(dat_wing, species == unique(dat_wing$species)[i])$elbow,subset(dat_wing, species == unique(dat_wing$species)[i])$pt2_Z, col = as.factor(subset(dat_wing, species == unique(dat_wing$species)[i])$BirdID_Frame))
i=20
plot(subset(dat_wing, species == unique(dat_wing$species)[i])$elbow,subset(dat_wing, species == unique(dat_wing$species)[i])$pt2_Z, col = as.factor(subset(dat_wing, species == unique(dat_wing$species)[i])$BirdID_Frame))
unique(dat_wing$species)[i]
i=21
plot(subset(dat_wing, species == unique(dat_wing$species)[i])$elbow,subset(dat_wing, species == unique(dat_wing$species)[i])$pt2_Z, col = as.factor(subset(dat_wing, species == unique(dat_wing$species)[i])$BirdID_Frame))
i=22
plot(subset(dat_wing, species == unique(dat_wing$species)[i])$elbow,subset(dat_wing, species == unique(dat_wing$species)[i])$pt2_Z, col = as.factor(subset(dat_wing, species == unique(dat_wing$species)[i])$BirdID_Frame))
# ---- This code is to be used with the LLT takes raw digitized points and prepares them for testing
#When re-running for new data double check that the transformations are working correctly.
library(stringr)
# CAUTION: This code is now set up to orient wings as follows:
#          1. Pt3 (Wrist) will be inline with Pt1 (humeral head) along the y axis
#          2. Pt3 (Wrist) will be inline with Pt1 (humeral head) along the z axis
#          3. Pt3 (Wrist) will be inline with Pt10 (S1) along the x axis
# Created: Christina Harvey
# Last updated: 16-Dec-2020
setwd("/Users/christinaharvey/Google Drive/DoctoralThesis/WingMorphology/")
source('jointangles.R')
library(stringr)
# ------------------------- Set file directory -------------------------
setwd("/Users/christinaharvey/Dropbox (University of Michigan)/Bird Mass Distribution/05_subsampled_optitrack")
# ----------------- Define set variables ------------
point_list <- c("pt1","pt2","pt3","pt4","pt6","pt7","pt8","pt9","pt10","pt11","pt12")
dim_list   <- c("X","Y","Z")
xaxis <- c(1, 0, 0)
yaxis <- c(0, 1, 0)
zaxis <- c(0, 0, 1)
# ------------------------- Read in data -------------------------
dat_info   <- read.csv(file = "2020_12_15_IDfile.csv")
##### This scripts reads in all range of motion tracks for a specific species.
##### Resizes down to each individual, subsamples and finally reorients each wing shape
## Load required libraries
library(tidyverse)
library(Morpho)
library(geomorph)
library(stringr)
library(gtools)
library(pracma)
source('/Users/christinaharvey/Documents/birdmoment/transformROM_supportingfunctions.R')
### -------------- Read in all morphological measurements ------------
run_data_path = "/Users/christinaharvey/Dropbox (University of Michigan)/Bird Mass Distribution/rundata/"
output_path   = "/Users/christinaharvey/Dropbox (University of Michigan)/Bird Mass Distribution/05_transformed_optitrack/"
# all of the non-wing based measurements for all specimens
dat_bird     = readxl::read_xlsx(paste(run_data_path,"bird_measurements_readytorun.xlsx",sep= ""), sheet = 'Major body parts')
# all of the wing based measurements for all specimens
dat_wingspec = readxl::read_xlsx(paste(run_data_path,"bird_measurements_readytorun.xlsx",sep= ""), sheet = 'Within wings')
dat_bird$species = NA
dat_bird$BirdID  = NA
for (i in 1:nrow(dat_bird)){
if (strsplit(dat_bird$bird_id, "_")[[i]][1] == "COLLI"){
dat_bird$species[i] = "col_liv"
dat_bird$BirdID[i]  = paste(strsplit(dat_bird$bird_id, "_")[[i]][2],strsplit(dat_bird$bird_id, "_")[[i]][3], sep = "_")
}else{
dat_bird$species[i] = paste(tolower(strsplit(dat_bird$bird_id, "_")[[i]][1]),strsplit(dat_bird$bird_id, "_")[[i]][2], sep = "_")
dat_bird$BirdID[i]  = paste(strsplit(dat_bird$bird_id, "_")[[i]][3],strsplit(dat_bird$bird_id, "_")[[i]][4], sep = "_")
}
}
dat_wingspec$species = NA
dat_wingspec$BirdID  = NA
for (i in 1:nrow(dat_wingspec)){
if (strsplit(dat_wingspec$bird_id, "_")[[i]][1] == "COLLI"){
dat_wingspec$species[i] = "col_liv"
dat_wingspec$BirdID[i]  = paste(strsplit(dat_wingspec$bird_id, "_")[[i]][2],strsplit(dat_wingspec$bird_id, "_")[[i]][3], sep = "_")
}else{
dat_wingspec$species[i] = paste(tolower(strsplit(dat_wingspec$bird_id, "_")[[i]][1]),strsplit(dat_wingspec$bird_id, "_")[[i]][2], sep = "_")
dat_wingspec$BirdID[i]  = paste(strsplit(dat_wingspec$bird_id, "_")[[i]][3],strsplit(dat_wingspec$bird_id, "_")[[i]][4], sep = "_")
}
}
#-------- Find all file names necessary -------
working_path  = "/Users/christinaharvey/Dropbox (University of Michigan)/Bird Mass Distribution/03_processed_optitrack/"
filename.3d   = list.files(path = working_path, pattern = paste('*',".csv",sep=""))
max_sample_no = 1 # maximum amount of samples to have within one bin
bin_size      = 2 # #deg x #deg bins that will have the max amount of samples
# create blank data frame
dat_ID = as.data.frame(matrix(nrow = length(filename.3d), ncol = 4))
colnames(dat_ID) = c("species","BirdID","TestID","wing")
## ----------------------------------------------------
## --------- Save identifying information -------------
## ----------------------------------------------------
# Save all the identifying information
for (i in 1:length(filename.3d)){
dat_ID$species[i] = paste(tolower(strsplit(filename.3d[i], "_")[[1]][2]),"_",strsplit(filename.3d[i], "_")[[1]][3], sep = "")
dat_ID$BirdID[i]  = paste(strsplit(filename.3d[i], "_")[[1]][4],"_",str_sub(strsplit(filename.3d[i], "_")[[1]][5],start = 1, end = -2), sep = "")
dat_ID$TestID[i]  = as.numeric(strsplit(filename.3d[i], "_")[[1]][7])
dat_ID$wing[i]    = str_sub(strsplit(filename.3d[i], "_")[[1]][5],-1)
}
no_species = length(unique(dat_ID$species))
## ----------------------------------------------------
## --------- Iterate through each species -------------
## ----------------------------------------------------
unique(dat_ID$species)
i = 1
curr_species  = unique(dat_ID$species)[i]
# identify which filenames belong to the current species
files_to_read = which(dat_ID$species == curr_species)
# identify how many body measurements we have for the current species
dat_body_curr = subset(dat_bird, use_body == "Y" & species == curr_species)
dat_allbody_curr = subset(dat_bird, species == curr_species)
# Read in all optitrack data from the given species
dat_raw         = read.csv(paste(working_path,filename.3d[files_to_read[1]],sep = ""), stringsAsFactors = FALSE,strip.white = TRUE, na.strings = c("NA"))
dat_raw$BirdID  = dat_ID$BirdID[files_to_read[1]]
dat_raw$TestID  = dat_ID$TestID[files_to_read[1]]
dat_raw$wing    = dat_ID$wing[files_to_read[1]]
# First few are in mm adjust to cm
if (files_to_read[1] < 13){dat_raw[,3:35] <- dat_raw[,3:35]*0.001}
for (j in 2:length(files_to_read)){
tmp = read.csv(paste(working_path,filename.3d[files_to_read[j]],sep = ""), stringsAsFactors = FALSE,strip.white = TRUE, na.strings = c("NA"))
tmp$BirdID  = dat_ID$BirdID[files_to_read[j]]
tmp$TestID  = dat_ID$TestID[files_to_read[j]]
tmp$wing    = dat_ID$wing[files_to_read[j]]
# First few are in mm adjust to cm
if (files_to_read[j] < 13){tmp[,3:35] <- tmp[,3:35]*0.001}
# The storm petrel had one wing track all points but not the other
if (ncol(tmp) > ncol(dat_raw)){
dat_raw$humerus_leading_position_x = dat_raw$humerus_position_x
dat_raw$humerus_leading_position_y = dat_raw$humerus_position_y
dat_raw$humerus_leading_position_z = dat_raw$humerus_position_z
dat_raw$wrist_leading_position_x = dat_raw$wrist_position_x
dat_raw$wrist_leading_position_y = dat_raw$wrist_position_y
dat_raw$wrist_leading_position_z = dat_raw$wrist_position_z
dat_raw$cmc_leading_position_x = dat_raw$cmc_position_x
dat_raw$cmc_leading_position_y = dat_raw$cmc_position_y
dat_raw$cmc_leading_position_z = dat_raw$cmc_position_z
}
dat_raw = smartbind(dat_raw, tmp)
}
dat_raw$species = curr_species
col_dat_raw = c("FrameID","time_sec","pt4_X","pt4_Y","pt4_Z" , "pt7_X","pt7_Y","pt7_Z","pt2_X","pt2_Y","pt2_Z","pt1_X","pt1_Y","pt1_Z",
"pt12_X","pt12_Y","pt12_Z","pt8_X","pt8_Y","pt8_Z","pt9_X","pt9_Y","pt9_Z","pt10_X","pt10_Y","pt10_Z","pt11_X","pt11_Y",
"pt11_Z","pt3_X","pt3_Y","pt3_Z","pt6_X","pt6_Y","pt6_Z","BirdID","TestID","wing","species" )
### ---------------- Rename the columns appropriately -----------------
dat_raw <- as_tibble(dat_raw)
dat_raw <- rename(dat_raw,
FrameID = frame,
pt1_X = humerus_position_x,          pt1_Y = humerus_position_y,          pt1_Z = humerus_position_z,
pt2_X = elbow_position_x,            pt2_Y = elbow_position_y,            pt2_Z = elbow_position_z,
pt3_X = wrist_position_x,            pt3_Y = wrist_position_y,            pt3_Z = wrist_position_z,
pt4_X = cmc_position_x,              pt4_Y = cmc_position_y,              pt4_Z = cmc_position_z,
pt8_X = p10_position_x,              pt8_Y = p10_position_y,              pt8_Z = p10_position_z,
pt9_X = p7_position_x,               pt9_Y = p7_position_y,               pt9_Z = p7_position_z,
pt10_X = s1_position_x,              pt10_Y = s1_position_y,              pt10_Z = s1_position_z,
pt11_X = s10_position_x,             pt11_Y = s10_position_y,             pt11_Z = s10_position_z)
# For wings where the leading positions were too close to the joints to differentiate set the joint positions as the edge points as well
if (ncol(dat_raw) == 39){
dat_raw <- rename(dat_raw,
pt6_X = wrist_leading_position_x,    pt6_Y = wrist_leading_position_y,    pt6_Z = wrist_leading_position_z,
pt7_X = cmc_leading_position_x,      pt7_Y = cmc_leading_position_y,      pt7_Z = cmc_leading_position_z,
pt12_X = humerus_leading_position_x, pt12_Y = humerus_leading_position_y, pt12_Z = humerus_leading_position_z)
}else{
dat_raw$pt12_X = dat_raw$pt1_X
dat_raw$pt12_Y = dat_raw$pt1_Y
dat_raw$pt12_Z = dat_raw$pt1_Z
dat_raw$pt6_X = dat_raw$pt3_X
dat_raw$pt6_Y = dat_raw$pt3_Y
dat_raw$pt6_Z = dat_raw$pt3_Z
dat_raw$pt7_X = dat_raw$pt4_X
dat_raw$pt7_Y = dat_raw$pt4_Y
dat_raw$pt7_Z = dat_raw$pt4_Z
}
dat_raw       = as.data.frame(dat_raw[complete.cases(dat_raw[,3:ncol(dat_raw)]),])  #Remove NaN rows
dat_raw       = dat_raw[,c(col_dat_raw)] # re-order accordingly will work as long as the first species tracks all points
# ---- Calculate the elbow and wrist angle for each frame
dat_raw$elbow <- NA
dat_raw$manus <- NA
#-- Loop through every row to compute elbow and manus angle
for (j in 1:nrow(dat_raw)){
dat_raw$elbow[j]     <- jointangles(dat_raw$pt1_X[j],dat_raw$pt1_Y[j],dat_raw$pt1_Z[j],
dat_raw$pt2_X[j],dat_raw$pt2_Y[j],dat_raw$pt2_Z[j],
dat_raw$pt3_X[j],dat_raw$pt3_Y[j],dat_raw$pt3_Z[j])
dat_raw$manus[j]     <- jointangles(dat_raw$pt2_X[j],dat_raw$pt2_Y[j],dat_raw$pt2_Z[j],
dat_raw$pt3_X[j],dat_raw$pt3_Y[j],dat_raw$pt3_Z[j],
dat_raw$pt4_X[j],dat_raw$pt4_Y[j],dat_raw$pt4_Z[j])
}
# Bin the data
dat_raw$elbow_round = bin_size*round(dat_raw$elbow/bin_size)
dat_raw$manus_round = bin_size*round(dat_raw$manus/bin_size)
dat_raw$BirdID_FrameSpec = dat_raw$BirdID
## ----------------------------------------------------
## --------- Iterate through each specimen -------------
## ----------------------------------------------------
curr_species  = unique(dat_ID$species)[i]
# identify which filenames belong to the current species
files_to_read = which(dat_ID$species == curr_species)
# identify how many body measurements we have for the current species
dat_body_curr = subset(dat_bird, use_body == "Y" & species == curr_species)
dat_allbody_curr = subset(dat_bird, species == curr_species)
# Read in all optitrack data from the given species
dat_raw         = read.csv(paste(working_path,filename.3d[files_to_read[1]],sep = ""), stringsAsFactors = FALSE,strip.white = TRUE, na.strings = c("NA"))
dat_raw$BirdID  = dat_ID$BirdID[files_to_read[1]]
dat_raw$TestID  = dat_ID$TestID[files_to_read[1]]
dat_raw$wing    = dat_ID$wing[files_to_read[1]]
# First few are in mm adjust to cm
if (files_to_read[1] < 13){dat_raw[,3:35] <- dat_raw[,3:35]*0.001}
files_to_read
for (j in 2:length(files_to_read)){
tmp = read.csv(paste(working_path,filename.3d[files_to_read[j]],sep = ""), stringsAsFactors = FALSE,strip.white = TRUE, na.strings = c("NA"))
tmp$BirdID  = dat_ID$BirdID[files_to_read[j]]
tmp$TestID  = dat_ID$TestID[files_to_read[j]]
tmp$wing    = dat_ID$wing[files_to_read[j]]
# First few are in mm adjust to cm
if (files_to_read[j] < 13){tmp[,3:35] <- tmp[,3:35]*0.001}
# The storm petrel had one wing track all points but not the other
if (ncol(tmp) > ncol(dat_raw)){
dat_raw$humerus_leading_position_x = dat_raw$humerus_position_x
dat_raw$humerus_leading_position_y = dat_raw$humerus_position_y
dat_raw$humerus_leading_position_z = dat_raw$humerus_position_z
dat_raw$wrist_leading_position_x = dat_raw$wrist_position_x
dat_raw$wrist_leading_position_y = dat_raw$wrist_position_y
dat_raw$wrist_leading_position_z = dat_raw$wrist_position_z
dat_raw$cmc_leading_position_x = dat_raw$cmc_position_x
dat_raw$cmc_leading_position_y = dat_raw$cmc_position_y
dat_raw$cmc_leading_position_z = dat_raw$cmc_position_z
}
dat_raw = smartbind(dat_raw, tmp)
}
dat_raw$species = curr_species
col_dat_raw = c("FrameID","time_sec","pt4_X","pt4_Y","pt4_Z" , "pt7_X","pt7_Y","pt7_Z","pt2_X","pt2_Y","pt2_Z","pt1_X","pt1_Y","pt1_Z",
"pt12_X","pt12_Y","pt12_Z","pt8_X","pt8_Y","pt8_Z","pt9_X","pt9_Y","pt9_Z","pt10_X","pt10_Y","pt10_Z","pt11_X","pt11_Y",
"pt11_Z","pt3_X","pt3_Y","pt3_Z","pt6_X","pt6_Y","pt6_Z","BirdID","TestID","wing","species" )
### ---------------- Rename the columns appropriately -----------------
dat_raw <- as_tibble(dat_raw)
dat_raw <- rename(dat_raw,
FrameID = frame,
pt1_X = humerus_position_x,          pt1_Y = humerus_position_y,          pt1_Z = humerus_position_z,
pt2_X = elbow_position_x,            pt2_Y = elbow_position_y,            pt2_Z = elbow_position_z,
pt3_X = wrist_position_x,            pt3_Y = wrist_position_y,            pt3_Z = wrist_position_z,
pt4_X = cmc_position_x,              pt4_Y = cmc_position_y,              pt4_Z = cmc_position_z,
pt8_X = p10_position_x,              pt8_Y = p10_position_y,              pt8_Z = p10_position_z,
pt9_X = p7_position_x,               pt9_Y = p7_position_y,               pt9_Z = p7_position_z,
pt10_X = s1_position_x,              pt10_Y = s1_position_y,              pt10_Z = s1_position_z,
pt11_X = s10_position_x,             pt11_Y = s10_position_y,             pt11_Z = s10_position_z)
ncol(dat_raw)
## Load required libraries
library(tidyverse)
dat_raw <- rename(dat_raw,
FrameID = frame,
pt1_X = humerus_position_x,          pt1_Y = humerus_position_y,          pt1_Z = humerus_position_z,
pt2_X = elbow_position_x,            pt2_Y = elbow_position_y,            pt2_Z = elbow_position_z,
pt3_X = wrist_position_x,            pt3_Y = wrist_position_y,            pt3_Z = wrist_position_z,
pt4_X = cmc_position_x,              pt4_Y = cmc_position_y,              pt4_Z = cmc_position_z,
pt8_X = p10_position_x,              pt8_Y = p10_position_y,              pt8_Z = p10_position_z,
pt9_X = p7_position_x,               pt9_Y = p7_position_y,               pt9_Z = p7_position_z,
pt10_X = s1_position_x,              pt10_Y = s1_position_y,              pt10_Z = s1_position_z,
pt11_X = s10_position_x,             pt11_Y = s10_position_y,             pt11_Z = s10_position_z)
View(dat_raw)
rename(dat_raw,
FrameID = frame)
library(dplyr)
warnings()
dat_raw <- rename(dat_raw,
FrameID = frame,
pt1_X = humerus_position_x,          pt1_Y = humerus_position_y,          pt1_Z = humerus_position_z,
pt2_X = elbow_position_x,            pt2_Y = elbow_position_y,            pt2_Z = elbow_position_z,
pt3_X = wrist_position_x,            pt3_Y = wrist_position_y,            pt3_Z = wrist_position_z,
pt4_X = cmc_position_x,              pt4_Y = cmc_position_y,              pt4_Z = cmc_position_z,
pt8_X = p10_position_x,              pt8_Y = p10_position_y,              pt8_Z = p10_position_z,
pt9_X = p7_position_x,               pt9_Y = p7_position_y,               pt9_Z = p7_position_z,
pt10_X = s1_position_x,              pt10_Y = s1_position_y,              pt10_Z = s1_position_z,
pt11_X = s10_position_x,             pt11_Y = s10_position_y,             pt11_Z = s10_position_z)
## Load required libraries
library(tidyverse)
library(Morpho)
library(geomorph)
library(stringr)
library(gtools)
library(pracma)
source('/Users/christinaharvey/Documents/birdmoment/transformROM_supportingfunctions.R')
### -------------- Read in all morphological measurements ------------
run_data_path = "/Users/christinaharvey/Dropbox (University of Michigan)/Bird Mass Distribution/rundata/"
output_path   = "/Users/christinaharvey/Dropbox (University of Michigan)/Bird Mass Distribution/05_transformed_optitrack/"
# all of the non-wing based measurements for all specimens
dat_bird     = readxl::read_xlsx(paste(run_data_path,"bird_measurements_readytorun.xlsx",sep= ""), sheet = 'Major body parts')
# all of the wing based measurements for all specimens
dat_wingspec = readxl::read_xlsx(paste(run_data_path,"bird_measurements_readytorun.xlsx",sep= ""), sheet = 'Within wings')
dat_bird$species = NA
dat_bird$BirdID  = NA
for (i in 1:nrow(dat_bird)){
if (strsplit(dat_bird$bird_id, "_")[[i]][1] == "COLLI"){
dat_bird$species[i] = "col_liv"
dat_bird$BirdID[i]  = paste(strsplit(dat_bird$bird_id, "_")[[i]][2],strsplit(dat_bird$bird_id, "_")[[i]][3], sep = "_")
}else{
dat_bird$species[i] = paste(tolower(strsplit(dat_bird$bird_id, "_")[[i]][1]),strsplit(dat_bird$bird_id, "_")[[i]][2], sep = "_")
dat_bird$BirdID[i]  = paste(strsplit(dat_bird$bird_id, "_")[[i]][3],strsplit(dat_bird$bird_id, "_")[[i]][4], sep = "_")
}
}
dat_wingspec$species = NA
dat_wingspec$BirdID  = NA
for (i in 1:nrow(dat_wingspec)){
if (strsplit(dat_wingspec$bird_id, "_")[[i]][1] == "COLLI"){
dat_wingspec$species[i] = "col_liv"
dat_wingspec$BirdID[i]  = paste(strsplit(dat_wingspec$bird_id, "_")[[i]][2],strsplit(dat_wingspec$bird_id, "_")[[i]][3], sep = "_")
}else{
dat_wingspec$species[i] = paste(tolower(strsplit(dat_wingspec$bird_id, "_")[[i]][1]),strsplit(dat_wingspec$bird_id, "_")[[i]][2], sep = "_")
dat_wingspec$BirdID[i]  = paste(strsplit(dat_wingspec$bird_id, "_")[[i]][3],strsplit(dat_wingspec$bird_id, "_")[[i]][4], sep = "_")
}
}
#-------- Find all file names necessary -------
working_path  = "/Users/christinaharvey/Dropbox (University of Michigan)/Bird Mass Distribution/03_processed_optitrack/"
filename.3d   = list.files(path = working_path, pattern = paste('*',".csv",sep=""))
max_sample_no = 1 # maximum amount of samples to have within one bin
bin_size      = 2 # #deg x #deg bins that will have the max amount of samples
# create blank data frame
dat_ID = as.data.frame(matrix(nrow = length(filename.3d), ncol = 4))
colnames(dat_ID) = c("species","BirdID","TestID","wing")
## ----------------------------------------------------
## --------- Save identifying information -------------
## ----------------------------------------------------
# Save all the identifying information
for (i in 1:length(filename.3d)){
dat_ID$species[i] = paste(tolower(strsplit(filename.3d[i], "_")[[1]][2]),"_",strsplit(filename.3d[i], "_")[[1]][3], sep = "")
dat_ID$BirdID[i]  = paste(strsplit(filename.3d[i], "_")[[1]][4],"_",str_sub(strsplit(filename.3d[i], "_")[[1]][5],start = 1, end = -2), sep = "")
dat_ID$TestID[i]  = as.numeric(strsplit(filename.3d[i], "_")[[1]][7])
dat_ID$wing[i]    = str_sub(strsplit(filename.3d[i], "_")[[1]][5],-1)
}
no_species = length(unique(dat_ID$species))
## ----------------------------------------------------
## --------- Iterate through each species -------------
## ----------------------------------------------------
i = 1
curr_species  = unique(dat_ID$species)[i]
# identify which filenames belong to the current species
files_to_read = which(dat_ID$species == curr_species)
# identify how many body measurements we have for the current species
dat_body_curr = subset(dat_bird, use_body == "Y" & species == curr_species)
dat_allbody_curr = subset(dat_bird, species == curr_species)
# Read in all optitrack data from the given species
dat_raw         = read.csv(paste(working_path,filename.3d[files_to_read[1]],sep = ""), stringsAsFactors = FALSE,strip.white = TRUE, na.strings = c("NA"))
dat_raw$BirdID  = dat_ID$BirdID[files_to_read[1]]
dat_raw$TestID  = dat_ID$TestID[files_to_read[1]]
dat_raw$wing    = dat_ID$wing[files_to_read[1]]
# First few are in mm adjust to cm
if (files_to_read[1] < 13){dat_raw[,3:35] <- dat_raw[,3:35]*0.001}
for (j in 2:length(files_to_read)){
tmp = read.csv(paste(working_path,filename.3d[files_to_read[j]],sep = ""), stringsAsFactors = FALSE,strip.white = TRUE, na.strings = c("NA"))
tmp$BirdID  = dat_ID$BirdID[files_to_read[j]]
tmp$TestID  = dat_ID$TestID[files_to_read[j]]
tmp$wing    = dat_ID$wing[files_to_read[j]]
# First few are in mm adjust to cm
if (files_to_read[j] < 13){tmp[,3:35] <- tmp[,3:35]*0.001}
# The storm petrel had one wing track all points but not the other
if (ncol(tmp) > ncol(dat_raw)){
dat_raw$humerus_leading_position_x = dat_raw$humerus_position_x
dat_raw$humerus_leading_position_y = dat_raw$humerus_position_y
dat_raw$humerus_leading_position_z = dat_raw$humerus_position_z
dat_raw$wrist_leading_position_x = dat_raw$wrist_position_x
dat_raw$wrist_leading_position_y = dat_raw$wrist_position_y
dat_raw$wrist_leading_position_z = dat_raw$wrist_position_z
dat_raw$cmc_leading_position_x = dat_raw$cmc_position_x
dat_raw$cmc_leading_position_y = dat_raw$cmc_position_y
dat_raw$cmc_leading_position_z = dat_raw$cmc_position_z
}
dat_raw = smartbind(dat_raw, tmp)
}
dat_raw$species = curr_species
col_dat_raw = c("FrameID","time_sec","pt4_X","pt4_Y","pt4_Z" , "pt7_X","pt7_Y","pt7_Z","pt2_X","pt2_Y","pt2_Z","pt1_X","pt1_Y","pt1_Z",
"pt12_X","pt12_Y","pt12_Z","pt8_X","pt8_Y","pt8_Z","pt9_X","pt9_Y","pt9_Z","pt10_X","pt10_Y","pt10_Z","pt11_X","pt11_Y",
"pt11_Z","pt3_X","pt3_Y","pt3_Z","pt6_X","pt6_Y","pt6_Z","BirdID","TestID","wing","species" )
### ---------------- Rename the columns appropriately -----------------
dat_raw <- as_tibble(dat_raw)
dat_raw <- rename(dat_raw,
FrameID = frame,
pt1_X = humerus_position_x,          pt1_Y = humerus_position_y,          pt1_Z = humerus_position_z,
pt2_X = elbow_position_x,            pt2_Y = elbow_position_y,            pt2_Z = elbow_position_z,
pt3_X = wrist_position_x,            pt3_Y = wrist_position_y,            pt3_Z = wrist_position_z,
pt4_X = cmc_position_x,              pt4_Y = cmc_position_y,              pt4_Z = cmc_position_z,
pt8_X = p10_position_x,              pt8_Y = p10_position_y,              pt8_Z = p10_position_z,
pt9_X = p7_position_x,               pt9_Y = p7_position_y,               pt9_Z = p7_position_z,
pt10_X = s1_position_x,              pt10_Y = s1_position_y,              pt10_Z = s1_position_z,
pt11_X = s10_position_x,             pt11_Y = s10_position_y,             pt11_Z = s10_position_z)
rename(dat_raw,
FrameID = frame)
