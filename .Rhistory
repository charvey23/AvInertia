success = TRUE
count = 1
for (i in 1:no_specimens){
# subset data to the current species
tmp = subset(dat_final, species == dat_bird$species[i] & BirdID == dat_bird$BirdID[i])
tmp$elbow_centered = tmp$elbow-mean(tmp$elbow)
tmp$manus_centered = tmp$manus-mean(tmp$manus)
for (m in 1:2){
if(m == 1){
varlist = varlist_abs
short_varlist = short_varlist_abs
} else{
varlist = varlist_sp
short_varlist = short_varlist_sp
}
# --------------- Fit models ------------------
# full models
models <- lapply(varlist, function(x) {lm(substitute(k ~ elbow_scaled*manus_scaled, list(k = as.name(x))), data = tmp)})
# compute the effect size from the centered values of elbow and wrist to avoid conflating the differences between species in absolute range
models_adj <- lapply(varlist, function(x) {lm(substitute(k*100 ~ elbow_centered*manus_centered, list(k = as.name(x))), data = tmp)})
CI_values      = lapply(models, confint)
coef_values    = lapply(models, coef)
# Compute the effect size
etap_values    = lapply(models_adj, function(x){eta_squared(car::Anova(x, type = 3))})
count2 = 1
for (j in 1:length(models)){
dat_model_out$species[count]        <- dat_bird$species[i]
dat_model_out$BirdID[count]         <- dat_bird$BirdID[i]
dat_model_out$model_variable[count] <- short_varlist[j]
dat_model_out$int[count]            <- coef_values[[j]]["(Intercept)"]
dat_model_out$elb[count]            <- coef_values[[j]]["elbow_scaled"]
dat_model_out$man[count]            <- coef_values[[j]]["manus_scaled"]
dat_model_out$r2[count]             <- summary(models[[j]])$r.squared
dat_model_out$elb_p[count]          <- summary(models[[j]])$coefficients["elbow_scaled",4]
dat_model_out$man_p[count]          <- summary(models[[j]])$coefficients["manus_scaled",4]
dat_model_out$elbman_p[count]       <- summary(models[[j]])$coefficients["elbow_scaled:manus_scaled",4]
dat_model_out$elbman[count]         <- coef_values[[j]]["elbow_scaled:manus_scaled"]
dat_model_out$int_lb[count]         <- CI_values[[j]]["(Intercept)",1]
dat_model_out$elb_lb[count]         <- CI_values[[j]]["elbow_scaled",1]
dat_model_out$man_lb[count]         <- CI_values[[j]]["manus_scaled",1]
dat_model_out$elbman_lb[count]      <- CI_values[[j]]["elbow_scaled:manus_scaled",1]
dat_model_out$int_ub[count]         <- CI_values[[j]]["(Intercept)",2]
dat_model_out$elb_ub[count]         <- CI_values[[j]]["elbow_scaled",2]
dat_model_out$man_ub[count]         <- CI_values[[j]]["manus_scaled",2]
dat_model_out$elbman_ub[count]      <- CI_values[[j]]["elbow_scaled:manus_scaled",2]
# Compute the effect sizes
dat_model_out$elb_etap[count]        <- etap_values[[j]][1,2]
dat_model_out$man_etap[count]        <- etap_values[[j]][2,2]
dat_model_out$elbman_etap[count]     <- etap_values[[j]][3,2]
count = count + 1
}
}
}
tmp           = reshape2::melt(dat_model_out, id = c("species","BirdID","model_variable"))
dat_model_out = reshape2::dcast(tmp, species + BirdID ~ model_variable + variable, value.var="value")
# Include basic geometry effects
tmp       = aggregate(list(full_m = dat_bird$full_m),  by=list(species = dat_bird$species, binomial = dat_bird$binomial, BirdID = dat_bird$BirdID), mean)
dat_comp  = merge(tmp, dat_model_out, by = c("species","BirdID"))
dat_model_out  = merge(tmp, dat_model_out, by = c("species","BirdID"))
tmp       = aggregate(list(torsotail_length = dat_bird$torsotail_length),  by=list(species = dat_bird$species, BirdID = dat_bird$BirdID), mean)
dat_comp  = merge(dat_comp, tmp, by = c("species","BirdID"))
# Include other important factors
# Range of each component - doesn't matter where the origin is for the range
test     <- aggregate(list(range_CGx               = dat_final$full_CGx,
range_CGx_specific      = dat_final$full_CGx_specific_orgBeak,
range_wing_CGy          = dat_final$wing_CGy,
range_wing_CGy_specific = dat_final$wing_CGy_specific,
range_CGz               = dat_final$full_CGz,
range_CGz_specific      = dat_final$full_CGz_specific_orgDorsal,
range_Ixx               = dat_final$full_Ixx,
range_Ixx_specific      = dat_final$full_Ixx_specific,
range_Iyy               = dat_final$full_Iyy,
range_Iyy_specific      = dat_final$full_Iyy_specific,
range_Izz               = dat_final$full_Izz,
range_Izz_specific      = dat_final$full_Izz_specific),
by=list(species = dat_final$species, BirdID = dat_final$BirdID), FUN=function(x){max(x)-min(x)})
dat_comp <- merge(dat_comp,test, by = c("species","BirdID"))
# Include other important factors
# Range of each component
test     <- aggregate(list(mean_CGx_orgBeak      = dat_final$full_CGx_orgBeak,
mean_CGz_orgDorsal    = dat_final$full_CGz_orgDorsal,
mean_CGx_orgShoulder  = dat_final$full_CGx_orgShoulder,
mean_CGz_orgShoulder  = dat_final$full_CGz_orgShoulder,
mean_wing_CGy                 = dat_final$wing_CGy_orgShoulder,
mean_CGx_specific_orgBeak     = dat_final$full_CGx_specific_orgBeak,
mean_CGz_specific_orgDorsal   = dat_final$full_CGz_specific_orgDorsal,
mean_CGx_specific_orgShoulder = dat_final$full_CGx_specific_orgShoulder,
mean_CGz_specific_orgShoulder = dat_final$full_CGz_specific_orgShoulder,
mean_wing_CGy_specific        = dat_final$wing_CGy_specific_orgShoulder,
mean_Ixx_specific = dat_final$full_Ixx_specific,
mean_Iyy_specific = dat_final$full_Iyy_specific,
mean_Izz_specific = dat_final$full_Izz_specific,
mean_Ixz_specific = dat_final$full_Ixz_specific,
mean_Ixx          = dat_final$full_Ixx,
mean_Iyy          = dat_final$full_Iyy,
mean_Izz          = dat_final$full_Izz,
mean_Ixz          = dat_final$full_Ixz,
full_length = dat_final$full_length),
by=list(species = dat_final$species, BirdID = dat_final$BirdID), mean)
dat_comp <- merge(dat_comp,test, by = c("species","BirdID"))
# Maximum values
test     <- aggregate(list(max_CGx_orgBeak       = dat_final$full_CGx_orgBeak,
max_CGz_orgDorsal     = dat_final$full_CGz_orgDorsal,
max_CGx_specific      = dat_final$full_CGx_specific_orgBeak,
max_CGx_orgShoulder   = dat_final$full_CGx_orgShoulder,
max_wing_CGy          = dat_final$wing_CGy_orgShoulder,
max_wing_CGy_specific = dat_final$wing_CGy_specific_orgShoulder,
max_CGz_specific      = dat_final$full_CGz_specific_orgDorsal,
max_Ixx               = dat_final$full_Ixx,
max_wing_Ixx          = dat_final$wing_Ixx,
sachs_pred_Ixx        = dat_final$sachs_pred_Ixx,
max_Ixx_specific      = dat_final$full_Ixx_specific,
max_Iyy               = dat_final$full_Iyy,
max_Iyy_specific      = dat_final$full_Iyy_specific,
max_Izz               = dat_final$full_Izz,
max_Izz_specific      = dat_final$full_Izz_specific,
max_Ixz_specific      = dat_final$full_Ixz_specific,
max_q                 = dat_final$prop_q_dot,
max_q_nd              = dat_final$prop_q_dot_nd,
max_wingspan          = dat_final$span,
max_length            = dat_final$full_length,
max_S                 = dat_final$S_max,
max_S_proj            = dat_final$S_proj_max,
max_stab              = 0.25*dat_final$chord/-dat_final$full_CGx_orgShoulder),
by=list(species = dat_final$species, BirdID = dat_final$BirdID), max)
dat_comp <- merge(dat_comp,test, by = c("species","BirdID"))
# Minimum values
test     <- aggregate(list(min_CGx_orgBeak       = dat_final$full_CGx_orgBeak,
min_CGz_orgDorsal     = dat_final$full_CGz_orgDorsal,
min_CGx_specific      = dat_final$full_CGx_specific_orgBeak,
min_CGx_orgShoulder   = dat_final$full_CGx_orgShoulder,
min_wing_CGy          = dat_final$wing_CGy_orgShoulder,
min_wing_CGy_specific = dat_final$wing_CGy_specific_orgShoulder,
min_CGz_specific      = dat_final$full_CGz_specific_orgDorsal,
min_wing_Ixx          = dat_final$wing_Ixx,
min_Ixx               = dat_final$full_Ixx,
min_Ixx_specific      = dat_final$full_Ixx_specific,
min_Iyy               = dat_final$full_Iyy,
min_Iyy_specific      = dat_final$full_Iyy_specific,
min_Izz               = dat_final$full_Izz,
min_q                 = dat_final$prop_q_dot,
min_q_nd              = dat_final$prop_q_dot_nd,
min_wingspan          = dat_final$span,
min_Izz_specific      = dat_final$full_Izz_specific,
min_Ixz_specific      = dat_final$full_Ixz_specific,
hum_len               = (dat_final$humerus_length_mm+dat_final$ulna_length_mm+dat_final$radius_length_mm+dat_final$cmc_length_mm),
min_stab              = 0.25*dat_final$chord/-dat_final$full_CGx_orgShoulder),
by=list(species = dat_final$species, BirdID = dat_final$BirdID), min)
dat_comp <- merge(dat_comp,test, by = c("species","BirdID"))
dat_comp$max_wing_CGx <- dat_final$wing_CGx[which((dat_final$wing_CGy - dat_final$pt1_Y) %in% dat_comp$max_wing_CGy)]
dat_comp$max_wing_CGx_specific <- dat_final$wing_CGx_specific_orgShoulder[which((dat_final$wing_CGy - dat_final$pt1_Y) %in% dat_comp$max_wing_CGy)]
# --------- Trim the trees -----------
# critical for PGLS models
dat_comp <- mutate(dat_comp, phylo = binomial)
## Prune down the tree to the relevant species
sp_mean_matched <- keep.tip(phy = full_tree, tip = dat_comp$binomial)
## ladderization rotates nodes to make it easier to see basal vs derived
pruned_mcc      <- ape::ladderize(sp_mean_matched)
# plot plot(pruned_mcc)
## The phylogeny will need to be re-formatted for use within MCMCglmm
inv.phylo <- inverseA(pruned_mcc, nodes = "TIPS", scale = TRUE)
## This is the heirarcy of the univariate prior.
univ_prior <-
list(G = list(G1 = list(V = 1, nu = 0.02)),
R = list(V = 1, nu = 0.02))
source("plotting_info.R")
source("plotting_dataprep.R")
# Panel A plot
CGxz_plot <- ggplot()+
# add data
geom_rect(data = vertices_cgxz, aes(xmin =0, ymin = -0.1, xmax = -0.2, ymax = 0, group = species_order), linetype="dashed", color = "gray", fill = NA, alpha = 0.25) +
# shoulder motion polygons
geom_rect(data = cg_x_shape[which(cg_x_shape$variable == "mean_CGxback"),], aes(xmin = value, xmax = cg_x_shape$value[which(cg_x_shape$variable == "mean_CGxfore")],
ymin = -cg_z_shape$value[which(cg_z_shape$variable == "mean_CGzup")],  ymax = -cg_z_shape$value[which(cg_z_shape$variable == "mean_CGzdn")],
fill = species_order), col = NA, alpha = 0.4) +
# elbow and wrist polygons
geom_polygon(data = vertices_cgxz, aes(x = full_CGx_specific_orgShoulder, y = -full_CGz_specific_orgShoulder, col = species_order, fill = species_order, group = BirdID)) +
facet_wrap(~species_order, ncol = 1) +
# colour control
scale_fill_manual(values = rev(cc_rain), name = "species") +
scale_colour_manual(values = rev(cc_rain), name = "species") +
th +
#theme control
theme(strip.background = element_blank(),
strip.text.x = element_blank())+
theme(legend.position="none") +
coord_fixed() +
scale_x_continuous(name='x (%)', limits = c(-0.2,0.05), breaks = c(-0.2,-0.1,0), labels = c(-20,-10,0)) +
scale_y_continuous(name='z (%)', limits = c(-0.12,0.08), breaks = c(-0.1,0), labels = c(10,0)) +
geom_rangeframe() +
annotate(geom = "segment", x = log(0), xend = log(0), y = -0.1, yend = 0) +
annotate(geom = "segment", x = 0, xend = -0.2, y = log(0), yend = log(0))
# plot
wingCGxy_plot <- ggplot() +
geom_rect(data = vertices_cgxy, aes(xmin =0, ymin = -0.14, xmax = 0.3, ymax = 0, group = species_order), linetype="dashed", color = "gray", fill = NA, alpha = 0.25) +
#geom_path(data = wing_shape, aes(x = value_y, y = value_x), col = "black", alpha = 0.2) +
geom_polygon(data = vertices_cgxy, aes(x = wing_CGy_specific_orgShoulder, y = wing_CGx_specific_orgShoulder, col = species_order, fill = species_order, group = BirdID)) +
facet_wrap(~species_order, ncol = 1) +
# colour control
scale_fill_manual(values = rev(cc_rain), name = "species") +
scale_colour_manual(values = rev(cc_rain), name = "species") +
#theme control
th +
theme(strip.background = element_blank(),
strip.text.x = element_blank())+
theme(legend.position="none") +
coord_fixed() +
scale_x_continuous(name='y (%)', limits = c(-0.01,0.31), breaks = c(0,0.1,0.2,0.3), labels = c(0,10,20,30)) +
scale_y_continuous(name='x (%)', limits = c(-0.15,0.1), breaks = c(-0.1,0), labels = c(-10,0)) +
geom_rangeframe() +
annotate(geom = "segment", x = log(0), xend = log(0), y = -0.1, yend = 0) +
annotate(geom = "segment", x = 0, xend = 0.3, y = log(0), yend = log(0))
effect_CGx <- ggplot()+
# add background info
geom_density(data = aggregate(list(CGx_elb_etap = dat_model_out$CGx_elb_etap),  by=list(species = dat_model_out$species), mean),
aes(x = CGx_elb_etap), fill = col_elb, alpha = 0.5)  +
geom_density(data = aggregate(list(CGx_man_etap = dat_model_out$CGx_man_etap),  by=list(species = dat_model_out$species), mean),
aes(x = CGx_man_etap), fill = col_man, alpha = 0.5)  +
geom_density(data = aggregate(list(CGx_elbman_etap = dat_model_out$CGx_elbman_etap),  by=list(species = dat_model_out$species), mean),
aes(x = CGx_elbman_etap), fill = col_elbman, alpha = 0.5)  +
# theme control
th +  # axis control
scale_y_continuous(limits = c(0,12), name = "", breaks = c(0,5,10)) +
scale_x_continuous(limits = c(0,1), name = lab_eta) +
geom_rangeframe() +
annotate(geom = "segment", x = 0, xend = 1, y = log(0), yend = log(0))+
annotate(geom = "segment", y = 0, yend = 10, x = log(0), xend = log(0))
effect_CGz <- ggplot()+
# add background info
geom_density(data = aggregate(list(CGz_elb_etap = dat_model_out$CGz_elb_etap),  by=list(species = dat_model_out$species), mean),
aes(x = CGz_elb_etap), fill = col_elb, alpha = 0.5)  +
geom_density(data = aggregate(list(CGz_man_etap = dat_model_out$CGz_man_etap),  by=list(species = dat_model_out$species), mean),
aes(x = CGz_man_etap), fill = col_man, alpha = 0.5)  +
geom_density(data = aggregate(list(CGz_elbman_etap = dat_model_out$CGz_elbman_etap),  by=list(species = dat_model_out$species), mean),
aes(x = CGz_elbman_etap), fill = col_elbman, alpha = 0.5)  +
# theme control
th +
# axis control
scale_y_continuous(limits = c(0,12), name = "", breaks = c(0,5,10)) +
scale_x_continuous(limits = c(0,1), name = lab_eta) +
geom_rangeframe() +
annotate(geom = "segment", x = 0, xend = 1, y = log(0), yend = log(0))+
annotate(geom = "segment", y = 0, yend = 10, x = log(0), xend = log(0))
effect_CGy <- ggplot()+
# add background info
geom_density(data = aggregate(list(CGy_elb_etap = dat_model_out$CGy_elb_etap),  by=list(species = dat_model_out$species), mean),
aes(x = CGy_elb_etap), fill = col_elb, alpha = 0.5)  +
geom_density(data = aggregate(list(CGy_man_etap = dat_model_out$CGy_man_etap),  by=list(species = dat_model_out$species), mean),
aes(x = CGy_man_etap), fill = col_man, alpha = 0.5)  +
geom_density(data = aggregate(list(CGy_elbman_etap = dat_model_out$CGy_elbman_etap),  by=list(species = dat_model_out$species), mean),
aes(x = CGy_elbman_etap), fill = col_elbman, alpha = 0.5)  +
# theme control
th +
# axis control
scale_y_continuous(limits = c(0,12), name = "", breaks = c(0,5,10)) +
scale_x_continuous(limits = c(0,1), name = lab_eta) +
geom_rangeframe() +
annotate(geom = "segment", x = 0, xend = 1, y = log(0), yend = log(0))+
annotate(geom = "segment", y = 0, yend = 10, x = log(0), xend = log(0))
CG_isometry_fullbird <- ggplot() +
# add specific line fits
geom_line(data = unique(dat_final[,c("species_order","BirdID","full_m")]), aes(x = full_m, y = exp(CGx_sp_model_mcmc_output$solutions[1,1])*full_m^CGx_sp_model_mcmc_output$solutions[2,1]),
col = "black") +
geom_ribbon(data = unique(dat_final[,c("species_order","BirdID","full_m")]), aes(x = full_m, ymin = exp(CGx_sp_model_mcmc_output$solutions[1,1])*full_m^CGx_sp_model_mcmc_output$solutions[2,2], ymax = exp(CGx_sp_model_mcmc_output$solutions[1,1])*full_m^CGx_sp_model_mcmc_output$solutions[2,3]),
col = NA, fill = "black", alpha = 0.3) +
geom_line(data = unique(dat_final[,c("species_order","BirdID","full_m")]), aes(x = full_m, y = exp(CGz_sp_model_mcmc_output$solutions[1,1])*full_m^CGz_sp_model_mcmc_output$solutions[2,1]),
col = "gray60") +
geom_ribbon(data = unique(dat_final[,c("species_order","BirdID","full_m")]), aes(x = full_m, ymin = exp(CGz_sp_model_mcmc_output$solutions[1,1])*full_m^CGz_sp_model_mcmc_output$solutions[2,2], ymax = exp(CGz_sp_model_mcmc_output$solutions[1,1])*full_m^CGz_sp_model_mcmc_output$solutions[2,3]),
col = NA, fill = "gray60", alpha = 0.3) +
# add specific data
geom_point(data = dat_comp, aes (x = full_m, y = -mean_CGx_specific_orgShoulder), col = "black", pch = 0) +
geom_point(data = dat_comp, aes (x = full_m, y = mean_CGz_specific_orgDorsal), col = "gray60", pch = 2) +
# add iso lines
geom_line(data = dat_comp, aes(x = full_m, y = exp(CGx_sp_model_mcmc_output$solutions[1,1])*full_m^(0)), col = "black", linetype = 2) +
geom_line(data = dat_comp, aes(x = full_m, y = exp(CGz_sp_model_mcmc_output$solutions[1,1])*full_m^(0)), col = "gray60", linetype = 2) +
th +
scale_x_continuous(trans='log10', name = "Mass (kg)",
breaks = c(0.01,0.1,1,10), labels = c(expression(10^-2),expression(10^-1),expression(10^0),expression(10^1)))+
scale_y_continuous(trans='log10', name = expression(paste("Mean ", bar("CG"), " (% of full length)", sep = "")), limits = c(0.02,0.3),
breaks = c(0.01,0.03,0.1,0.3), labels = c(1,3,10,30)) +
geom_rangeframe() +
annotate(geom = "segment", x = 0, xend = 0, y = 0.03, yend = 0.3) +
annotate(geom = "segment", x = 0.01, xend = 10, y = 0, yend = 0)
CG_isometry_wingonly <- ggplot() +
# add specific line fits
geom_line(data = unique(dat_final[,c("species_order","BirdID","full_m")]), aes(x = full_m, y = exp(CGy_sp_model_mcmc_output$solutions[1,1])*full_m^CGy_sp_model_mcmc_output$solutions[2,1]),
col = "gray40") +
geom_ribbon(data = unique(dat_final[,c("species_order","BirdID","full_m")]), aes(x = full_m, ymin = exp(CGy_sp_model_mcmc_output$solutions[1,1])*full_m^CGy_sp_model_mcmc_output$solutions[2,2], ymax = exp(CGy_sp_model_mcmc_output$solutions[1,1])*full_m^CGy_sp_model_mcmc_output$solutions[2,3]),
col = NA, fill = "gray40", alpha = 0.3) +
# add specific data
geom_point(data = dat_comp, aes (x = full_m, y = mean_wing_CGy_specific), col = "gray40", pch = 1) +
# add iso lines
geom_line(data = dat_comp, aes(x = full_m, y = exp(CGy_sp_model_mcmc_output$solutions[1,1])*full_m^(0)), col = "gray40", linetype = 2) +
th +
scale_x_continuous(trans='log10', name = "Mass (kg)",
breaks = c(0.01,0.1,1,10), labels = c(expression(10^-2),expression(10^-1),expression(10^0),expression(10^1)))+
scale_y_continuous(trans='log10', name = expression(paste("Mean ", bar("CG"), " (% of halfspan)", sep = "")), limits = c(0.02,0.3),
breaks = c(0.01,0.03,0.1,0.3), labels = c(1,3,10,30)) +
geom_rangeframe() +
annotate(geom = "segment", x = 0, xend = 0, y = 0.03, yend = 0.3) +
annotate(geom = "segment", x = 0.01, xend = 10, y = 0, yend = 0)
leftcol <- plot_grid(phylo_plot_complete,CGxz_plot, wingCGxy_plot,
#arrangement data
ncol = 3,
rel_widths = c(1,0.6,0.6),
#labels
labels = c("","",""),
label_size = 10,
label_fontfamily = "sans")
#export as 9x3.5 if inputting independently
rightcol_ind <- plot_grid(effect_CGx,effect_CGz,effect_CGy,CG_isometry_fullbird,CG_isometry_wingonly,
#arrangement data
ncol = 1,
rel_heights = c(0.5,0.5,0.5,1.3,1.3),
#labels
labels = c("",""),
label_size = 10,
label_fontfamily = "sans")
#exported as 12x12
Figure2_final <- plot_grid(leftcol, rightcol_ind,
#arrangement data
ncol = 2,
rel_widths = c(1,0.8),
#labels
labels = c("",""),
label_size = 10,
label_fontfamily = "sans")
Figure2_final
#exported as 12x12
Figure2_final <- plot_grid(leftcol, rightcol_ind,
#arrangement data
ncol = 2,
rel_widths = c(1,0.8),
#labels
labels = c("",""),
label_size = 10,
label_fontfamily = "sans")
Figure2_final
max(dat_comp$mean_wing_CGy_specific)
CG_isometry_fullbird <- ggplot() +
# add specific line fits
geom_line(data = unique(dat_final[,c("species_order","BirdID","full_m")]), aes(x = full_m, y = exp(CGx_sp_model_mcmc_output$solutions[1,1])*full_m^CGx_sp_model_mcmc_output$solutions[2,1]),
col = "black") +
geom_ribbon(data = unique(dat_final[,c("species_order","BirdID","full_m")]), aes(x = full_m, ymin = exp(CGx_sp_model_mcmc_output$solutions[1,1])*full_m^CGx_sp_model_mcmc_output$solutions[2,2], ymax = exp(CGx_sp_model_mcmc_output$solutions[1,1])*full_m^CGx_sp_model_mcmc_output$solutions[2,3]),
col = NA, fill = "black", alpha = 0.3) +
geom_line(data = unique(dat_final[,c("species_order","BirdID","full_m")]), aes(x = full_m, y = exp(CGz_sp_model_mcmc_output$solutions[1,1])*full_m^CGz_sp_model_mcmc_output$solutions[2,1]),
col = "gray60") +
geom_ribbon(data = unique(dat_final[,c("species_order","BirdID","full_m")]), aes(x = full_m, ymin = exp(CGz_sp_model_mcmc_output$solutions[1,1])*full_m^CGz_sp_model_mcmc_output$solutions[2,2], ymax = exp(CGz_sp_model_mcmc_output$solutions[1,1])*full_m^CGz_sp_model_mcmc_output$solutions[2,3]),
col = NA, fill = "gray60", alpha = 0.3) +
# add specific data
geom_point(data = dat_comp, aes (x = full_m, y = -mean_CGx_specific_orgShoulder), col = "black", pch = 0) +
geom_point(data = dat_comp, aes (x = full_m, y = mean_CGz_specific_orgDorsal), col = "gray60", pch = 2) +
# add iso lines
geom_line(data = dat_comp, aes(x = full_m, y = exp(CGx_sp_model_mcmc_output$solutions[1,1])*full_m^(0)), col = "black", linetype = 2) +
geom_line(data = dat_comp, aes(x = full_m, y = exp(CGz_sp_model_mcmc_output$solutions[1,1])*full_m^(0)), col = "gray60", linetype = 2) +
th +
scale_x_continuous(trans='log10', name = "Mass (kg)",
breaks = c(0.01,0.1,1,10), labels = c(expression(10^-2),expression(10^-1),expression(10^0),expression(10^1)))+
scale_y_continuous(trans='log10', name = expression(paste("Mean ", bar("CG"), " (% of full length)", sep = "")), limits = c(0.02,0.2),
breaks = c(0.01,0.02,0.1,0.2), labels = c(1,2,10,20)) +
geom_rangeframe() +
annotate(geom = "segment", x = 0, xend = 0, y = 0.02, yend = 0.2) +
annotate(geom = "segment", x = 0.01, xend = 10, y = 0, yend = 0)
CG_isometry_wingonly <- ggplot() +
# add specific line fits
geom_line(data = unique(dat_final[,c("species_order","BirdID","full_m")]), aes(x = full_m, y = exp(CGy_sp_model_mcmc_output$solutions[1,1])*full_m^CGy_sp_model_mcmc_output$solutions[2,1]),
col = "gray40") +
geom_ribbon(data = unique(dat_final[,c("species_order","BirdID","full_m")]), aes(x = full_m, ymin = exp(CGy_sp_model_mcmc_output$solutions[1,1])*full_m^CGy_sp_model_mcmc_output$solutions[2,2], ymax = exp(CGy_sp_model_mcmc_output$solutions[1,1])*full_m^CGy_sp_model_mcmc_output$solutions[2,3]),
col = NA, fill = "gray40", alpha = 0.3) +
# add specific data
geom_point(data = dat_comp, aes (x = full_m, y = mean_wing_CGy_specific), col = "gray40", pch = 1) +
# add iso lines
geom_line(data = dat_comp, aes(x = full_m, y = exp(CGy_sp_model_mcmc_output$solutions[1,1])*full_m^(0)), col = "gray40", linetype = 2) +
th +
scale_x_continuous(trans='log10', name = "Mass (kg)",
breaks = c(0.01,0.1,1,10), labels = c(expression(10^-2),expression(10^-1),expression(10^0),expression(10^1)))+
scale_y_continuous(trans='log10', name = expression(paste("Mean ", bar("CG"), " (% of halfspan)", sep = "")), limits = c(0.02,0.2),
breaks = c(0.01,0.02,0.1,0.2), labels = c(1,2,10,20)) +
geom_rangeframe() +
annotate(geom = "segment", x = 0, xend = 0, y = 0.02, yend = 0.2) +
annotate(geom = "segment", x = 0.01, xend = 10, y = 0, yend = 0)
leftcol <- plot_grid(phylo_plot_complete,CGxz_plot, wingCGxy_plot,
#arrangement data
ncol = 3,
rel_widths = c(1,0.6,0.6),
#labels
labels = c("","",""),
label_size = 10,
label_fontfamily = "sans")
rightcol_ind <- plot_grid(effect_CGx,effect_CGz,effect_CGy,CG_isometry_fullbird,CG_isometry_wingonly,
#arrangement data
ncol = 1,
rel_heights = c(0.5,0.5,0.5,1.3,1.3),
#labels
labels = c("",""),
label_size = 10,
label_fontfamily = "sans")
#exported as 12x12
Figure2_final <- plot_grid(leftcol, rightcol_ind,
#arrangement data
ncol = 2,
rel_widths = c(1,0.8),
#labels
labels = c("",""),
label_size = 10,
label_fontfamily = "sans")
Figure2_final
# Extract the correct colours to colour Fig 4a properly
merge(subset(ggplot_build(var_test_plot)$data[[1]], shape ==21),subset(dat_var_tot, component != "full_I"), by.x = "x", by.y = "mean_sig_sq")
var_test_plot <- ggplot()+
geom_point(data = subset(dat_var_tot, component != "full_I"),
aes(x = mean_sig_sq, y = 1,fill = mean_sig_sq), pch = 21, col = "black") +
geom_point(data = dat_var_tot, aes(x = ind_var_CGx$opt$sigsq, y = 1,fill = ind_var_CGx$opt$sigsq), col = "black", size = 2, pch = 22) +
geom_point(data = dat_var_tot, aes(x = ind_var_CGz$opt$sigsq, y = 1,fill = ind_var_CGz$opt$sigsq), col = "black", size = 2, pch = 22) +
geom_point(data = dat_var_tot, aes(x = ind_var_CGx_sh$opt$sigsq, y = 1,fill = ind_var_CGx_sh$opt$sigsq), col = "black", size = 2, pch = 22) +
geom_point(data = dat_var_tot, aes(x = ind_var_CGz_sh$opt$sigsq, y = 1,fill = ind_var_CGz_sh$opt$sigsq), col = "black", size = 2, pch = 22) +
scale_fill_gradient(low = "white", high = "#2B2530", name = "rate of variance evolution") +
th
# Extract the correct colours to colour Fig 4a properly
merge(subset(ggplot_build(var_test_plot)$data[[1]], shape ==21),subset(dat_var_tot, component != "full_I"), by.x = "x", by.y = "mean_sig_sq")
# exported as 4x4
var_sens_plot <- ggplot()+
geom_dotplot(data = dat_var_range, aes(x = component, y = mean_sig_sq), col = NA, fill = "black", binaxis='y', stackdir='center', dotsize = 8, binwidth = 1/400, alpha = 0.6) +
#geom_point(data = dat_var_tot, aes(x = "full_CG", y = ind_var_CGx$opt$sigsq),fill = "gray",  col = "black", size = 1.5, pch = 22, alpha = 0.3) +
#geom_point(data = dat_var_tot, aes(x = "full_CG", y = ind_var_CGz$opt$sigsq),fill = "gray",  col = "black", size = 1.5, pch = 24, alpha = 0.3) +
geom_point(data = dat_var_tot, aes(x = "full_CG_sh", y = ind_var_CGx_sh$opt$sigsq),fill = "gray",  col = "black", size = 1.5, pch = 22, alpha = 0.3) +
geom_point(data = dat_var_tot, aes(x = "full_CG_sh", y = ind_var_CGz_sh$opt$sigsq),fill = "gray",  col = "black", size = 1.5, pch = 24, alpha = 0.3) +
geom_point(data = dat_var_tot, aes(x = component, y = mean_sig_sq), fill = "gray", col = "black", size = 2.5, pch = 23) +
th+
scale_y_continuous(trans = "log10", limits = c(0.005,0.125), breaks = c(0.005,0.01,0.05,0.1), name = expression(paste(sigma^2,""[mult]))) +
geom_rangeframe() +
annotate(geom = "segment", y = 0.005, yend = 0.1, x = log(0), xend = log(0)) +
coord_flip()
var_sens_plot
ggplot_build(var_test_plot)$data[[4]]
ggplot_build(var_test_plot)$data[[5]]
max(dat_final$wing_CGy_specific_orgShoulder)
dat_final$species[which.max(dat_final$wing_CGy_specific_orgShoulder)]
max(dat_comp$max_wing_CGy_specific)
max(dat_comp$CGy_elb_p)
min(dat_comp$CGy_elb_etap)
max(dat_comp$CGy_man_p)
min(dat_comp$CGy_man_etap)
## check that the wing position is scaling with wingspan - per Rayner
pgls_model_mcmc <-
MCMCglmm::MCMCglmm(
log(max_wing_CGy) ~ log(max_wingspan),
random = ~ phylo,
scale = FALSE, ## whether you use this is up to you -- whatever is fair
ginverse = list(phylo = inv.phylo$Ainv),
family = c("gaussian"), ## errors are modeled as drawn from a Gaussian
data = dat_comp,
prior = univ_prior,
nitt = 130000, thin = 100, burnin = 30000,
verbose = FALSE, ## switch this to TRUE if you feel like it
pr = TRUE, pl = TRUE ## this saves some model output stuff
)
summary(pgls_model_mcmc)
tmp = aggregate(list(Ixx_range =  dat_comp$max_Ixx/dat_comp$min_Ixx),  by=list(species = dat_comp$species), max)
View(tmp)
tmp = aggregate(list(Izz_range =  dat_comp$max_Izz/dat_comp$min_Izz),  by=list(species = dat_comp$species), max)
## Determine the significance values for MOI
max(dat_comp$Ixx_elb_p)
min(dat_comp$Ixx_elb_etap)
dat_comp$Ixx_elb_p
dat_comp$species[which.max(dat_comp$Ixx_elb_p)]
tmp = aggregate(list(Izz_range =  dat_comp$Ixx_elb_p),  by=list(species = dat_comp$species), max)
View(tmp)
max(dat_comp$Izz_elb_p)
min(dat_comp$Izz_elb_etap)
## ---------------------- Agility -----------------------
pgls_model_mcmc <-
MCMCglmm::MCMCglmm(
log(max_q) ~ log(full_m),
random = ~ phylo,
scale = FALSE, ## whether you use this is up to you -- whatever is fair
ginverse = list(phylo = inv.phylo$Ainv),
family = c("gaussian"), ## errors are modeled as drawn from a Gaussian
data = dat_comp,
prior = univ_prior,
nitt = 130000, thin = 100, burnin = 30000,
verbose = FALSE, ## switch this to TRUE if you feel like it
pr = TRUE, pl = TRUE ## this saves some model output stuff
)
summary(pgls_model_mcmc)
# check that this does not scale with mass
pgls_model_mcmc <-
MCMCglmm::MCMCglmm(
log(max_q_nd) ~ log(full_m),
random = ~ phylo,
scale = FALSE, ## whether you use this is up to you -- whatever is fair
ginverse = list(phylo = inv.phylo$Ainv),
family = c("gaussian"), ## errors are modeled as drawn from a Gaussian
data = dat_comp,
prior = univ_prior,
nitt = 130000, thin = 100, burnin = 30000,
verbose = FALSE, ## switch this to TRUE if you feel like it
pr = TRUE, pl = TRUE ## this saves some model output stuff
)
tmp = aggregate(list(c_l_theory = dat_final$chord/dat_final$full_length), by = list(species = dat_final$species, BirdID = dat_final$BirdID), min)
summary(pgls_model_mcmc)
OU_xcg
exp(-5.179997)
OU_xcg = fitContinuous(phy = pruned_mcc, dat = all_data_means_mat[,c("mean_CGx_orgShoulder")], model = "OU")
OU_xcg
exp(-3.182470)
OU_xcg = fitContinuous(phy = pruned_mcc, dat = all_data_means_mat[,c("mean_CGx_specific_orgShoulder")], model = "OU")
summary(OU_xcg)
OU_xcg
exp(-2.318099)
OU_maxstab
OU_minstab
