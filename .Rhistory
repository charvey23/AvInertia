# check ulna/radius length to be sure on units
dat_info$ur_length[i] = mean(sqrt((rawdat$pt3_X - rawdat$pt2_X)^2 + (rawdat$pt3_Y - rawdat$pt2_Y)^2 + (rawdat$pt3_Z - rawdat$pt2_Z)^2))
## ------- Reorient Wings ---------
dat_clean <- rawdat
#------------------------------- Step 1 -------------------------------
##### error doesn't adjust all points ######
#Make pt 1 on humerus the beginning location
for (j in 2:11){
for (k in 1:3){
col_name = paste(point_list[j],dim_list[k],sep = "_")
pt1_name = paste(point_list[1],dim_list[k],sep = "_")
dat_clean[,col_name] <- dat_clean[,col_name] - dat_clean[,pt1_name]
}
}
dat_clean[,c("pt1_X","pt1_Y","pt1_Z")] <- 0
#-------------------------------  Step 2 -------------------------------
# Set pt 3 in line with Pt 1 along the wingspan
#Calculate angle between axis that runs along wing length and pt 3 (rotate about z)
#Project onto xaxis & make negative if j1 > 0:
i1 = dat_clean$pt3_X
j1 = dat_clean$pt3_Y
dot_xaxis = i1
vec_norm  = sqrt(i1^2 + j1^2)
interior  = dot_xaxis/vec_norm
thetaz    = acos(interior) + pi / 2
thetaz[which(j1 > 0)] = -acos(interior[which(j1 > 0)]) + pi / 2
# Rotate about the z axis
tmp <- dat_clean
for (j in 1:11){
for (k in 1:3){
col_name = paste(point_list[j],dim_list[k],sep = "_")
if (k == 1){
dat_clean[,col_name] = cos(thetaz) * tmp[,col_name] - sin(thetaz) * tmp[,paste(point_list[j],dim_list[2],sep = "_")]
} else{
if(k == 2){
dat_clean[,col_name] = sin(thetaz) * tmp[,paste(point_list[j],dim_list[1],sep = "_")] + cos(thetaz) * tmp[,col_name]
}
}
}
}
# CAUTION: Verify that Pt3X=x_adj1=0 after this step - View(subset(pts,Pt.No == 3))
#------------------------------- Step 3 -------------------------------
# Set pt 3 in line with Pt 1 looking down the length of wing
# Calculate angle between x axis and pt 3 (rotate about y)
# Project onto xaxis & make negative if k2 > 0
j2 = dat_clean$pt3_Y
k2 = dat_clean$pt3_Z
dot_yaxis = j2
vec_norm  = sqrt(j2^2 + k2^2)
interior = dot_yaxis/vec_norm
thetax = acos(interior)
thetax[which(k2 > 0)] = -acos(interior[which(k2 > 0)])
# Rotate about the x axis
tmp <- dat_clean
for (j in 1:11){
for (k in 1:3){
col_name = paste(point_list[j],dim_list[k],sep = "_")
if (k == 2){
dat_clean[,col_name] = cos(thetax) * tmp[,col_name] - sin(thetax) * tmp[,paste(point_list[j],dim_list[3],sep = "_")]
} else{
if(k == 3){
dat_clean[,col_name] = sin(thetax) * tmp[,paste(point_list[j],dim_list[2],sep = "_")] + cos(thetax) * tmp[,col_name]
}
}
}
}
# CAUTION: Verify that Pt3Z=z_adj2=0 after this step - View(subset(pts,Pt.No == 3))
#------------------------------- Step 4 -------------------------------
# Set pt 10 in line with Pt 3 looking from back of wing
# Calculate angle between x axis and pt 10 (rotate about y)
# Project onto yaxis & make negative if k2 > 0
i3 = dat_clean$pt10_X
k3 = dat_clean$pt10_Z
dot_xaxis = i3
vec_norm  = sqrt(i3^2 + k3^2)
interior  = dot_xaxis/vec_norm
thetay = -acos(interior)
thetay[which(k3 > 0)] = acos(interior[which(k3 > 0)])
#thetay[which(dat_clean$pt2_X < 0)] = thetay[which(dat_clean$pt2_X < 0)] + pi
# Rotate about the y axis
tmp <- dat_clean
for (j in 1:11){
for (k in 1:3){
col_name = paste(point_list[j],dim_list[k],sep = "_")
if (k == 1){
dat_clean[,col_name] = cos(thetay) * tmp[,col_name] + sin(thetay) * tmp[,paste(point_list[j],dim_list[3],sep = "_")]
} else{
if(k == 3){
dat_clean[,col_name] = -sin(thetay) * tmp[,paste(point_list[j],dim_list[1],sep = "_")] + cos(thetay) * tmp[,col_name]
}
}
}
}
# CAUTION: Verify that Pt10Z=z_adj3=0 after this step - View(subset(pts,Pt.No == 10))
#------------------------------- Step 5 -------------------------------
# x = -x; y = y; z =  z:
# col_liv_20_0300R_002 & 004
# col_liv_20_0281R_001
# x = -x; y = y; z = -z:
# ard_her_20_317L_001
for (j in 1:11) {
col_name = paste(point_list[j], dim_list[1], sep = "_")
dat_clean[, col_name] <- -dat_clean[, col_name]
if(wing == "R"){
col_name = paste(point_list[j], dim_list[3], sep = "_")
dat_clean[, col_name] <- -dat_clean[, col_name]
}
}
plot(dat_clean$pt2_Y[m],dat_clean$pt2_Z[m], xlim =c(-max,max), ylim = c(-max,max))
points(dat_clean$pt3_Y[m],dat_clean$pt3_Z[m],xlim =c(-max,max), ylim = c(-max,max),col = "blue")
points(dat_clean$pt4_Y[m], dat_clean$pt4_Z[m], xlim =c(-max,max), ylim = c(-max,max), col = "green")
points(dat_clean$pt8_Y[m],dat_clean$pt8_Z[m], xlim =c(-max,max), ylim = c(-max,max), col = "purple")
points(dat_clean$pt11_Y[m],dat_clean$pt11_Z[m], xlim =c(-max,max), ylim = c(-max,max), col = "yellow")
points(dat_clean$pt1_Y[m],dat_clean$pt1_Z[m], xlim =c(-max,max), ylim = c(-max,max), col = "red")
plot(dat_clean$pt2_Y[m],dat_clean$pt2_X[m], xlim =c(-max,max), ylim = c(-max,max))
points(dat_clean$pt3_Y[m],dat_clean$pt3_X[m],xlim =c(-max,max), ylim = c(-max,max),col = "blue")
points(dat_clean$pt4_Y[m], dat_clean$pt4_X[m], xlim =c(-max,max), ylim = c(-max,max), col = "green")
points(dat_clean$pt1_Y[m],dat_clean$pt1_X[m], xlim =c(-max,max), ylim = c(-max,max), col = "red")
points(dat_clean$pt8_Y[m],dat_clean$pt8_X[m], xlim =c(-max,max), ylim = c(-max,max), col = "purple")
points(dat_clean$pt11_Y[m],dat_clean$pt11_X[m], xlim =c(-max,max), ylim = c(-max,max), col = "yellow")
plot(dat_clean$pt2_Y[m],dat_clean$pt2_Z[m], xlim =c(-max,max), ylim = c(-max,max))
points(dat_clean$pt3_Y[m],dat_clean$pt3_Z[m],xlim =c(-max,max), ylim = c(-max,max),col = "blue")
points(dat_clean$pt4_Y[m], dat_clean$pt4_Z[m], xlim =c(-max,max), ylim = c(-max,max), col = "green")
points(dat_clean$pt8_Y[m],dat_clean$pt8_Z[m], xlim =c(-max,max), ylim = c(-max,max), col = "purple")
points(dat_clean$pt11_Y[m],dat_clean$pt11_Z[m], xlim =c(-max,max), ylim = c(-max,max), col = "yellow")
points(dat_clean$pt1_Y[m],dat_clean$pt1_Z[m], xlim =c(-max,max), ylim = c(-max,max), col = "red")
View(dat_info)
i = 29
# Read in specific wing data
filename <- paste("2020_12_15_",dat_info$species[i],"_",dat_info$birdid[i],"_00",dat_info$testid[i],"_subsampled.csv",sep = "")
wing = str_sub(dat_info$birdid[i],-1)
rawdat   <- read.csv(filename, stringsAsFactors = FALSE, strip.white = TRUE, na.strings = c("NA") )
if (i < 12){
rawdat[,3:35] <- rawdat[,3:35]/1000}  #First few are in mm
# check ulna/radius length to be sure on units
dat_info$ur_length[i] = mean(sqrt((rawdat$pt3_X - rawdat$pt2_X)^2 + (rawdat$pt3_Y - rawdat$pt2_Y)^2 + (rawdat$pt3_Z - rawdat$pt2_Z)^2))
## ------- Reorient Wings ---------
dat_clean <- rawdat
#------------------------------- Step 1 -------------------------------
##### error doesn't adjust all points ######
#Make pt 1 on humerus the beginning location
for (j in 2:11){
for (k in 1:3){
col_name = paste(point_list[j],dim_list[k],sep = "_")
pt1_name = paste(point_list[1],dim_list[k],sep = "_")
dat_clean[,col_name] <- dat_clean[,col_name] - dat_clean[,pt1_name]
}
}
dat_clean[,c("pt1_X","pt1_Y","pt1_Z")] <- 0
#-------------------------------  Step 2 -------------------------------
# Set pt 3 in line with Pt 1 along the wingspan
#Calculate angle between axis that runs along wing length and pt 3 (rotate about z)
#Project onto xaxis & make negative if j1 > 0:
i1 = dat_clean$pt3_X
j1 = dat_clean$pt3_Y
dot_xaxis = i1
vec_norm  = sqrt(i1^2 + j1^2)
interior  = dot_xaxis/vec_norm
thetaz    = acos(interior) + pi / 2
thetaz[which(j1 > 0)] = -acos(interior[which(j1 > 0)]) + pi / 2
# Rotate about the z axis
tmp <- dat_clean
for (j in 1:11){
for (k in 1:3){
col_name = paste(point_list[j],dim_list[k],sep = "_")
if (k == 1){
dat_clean[,col_name] = cos(thetaz) * tmp[,col_name] - sin(thetaz) * tmp[,paste(point_list[j],dim_list[2],sep = "_")]
} else{
if(k == 2){
dat_clean[,col_name] = sin(thetaz) * tmp[,paste(point_list[j],dim_list[1],sep = "_")] + cos(thetaz) * tmp[,col_name]
}
}
}
}
# CAUTION: Verify that Pt3X=x_adj1=0 after this step - View(subset(pts,Pt.No == 3))
#------------------------------- Step 3 -------------------------------
# Set pt 3 in line with Pt 1 looking down the length of wing
# Calculate angle between x axis and pt 3 (rotate about y)
# Project onto xaxis & make negative if k2 > 0
j2 = dat_clean$pt3_Y
k2 = dat_clean$pt3_Z
dot_yaxis = j2
vec_norm  = sqrt(j2^2 + k2^2)
interior = dot_yaxis/vec_norm
thetax = acos(interior)
thetax[which(k2 > 0)] = -acos(interior[which(k2 > 0)])
# Rotate about the x axis
tmp <- dat_clean
for (j in 1:11){
for (k in 1:3){
col_name = paste(point_list[j],dim_list[k],sep = "_")
if (k == 2){
dat_clean[,col_name] = cos(thetax) * tmp[,col_name] - sin(thetax) * tmp[,paste(point_list[j],dim_list[3],sep = "_")]
} else{
if(k == 3){
dat_clean[,col_name] = sin(thetax) * tmp[,paste(point_list[j],dim_list[2],sep = "_")] + cos(thetax) * tmp[,col_name]
}
}
}
}
# CAUTION: Verify that Pt3Z=z_adj2=0 after this step - View(subset(pts,Pt.No == 3))
#------------------------------- Step 4 -------------------------------
# Set pt 10 in line with Pt 3 looking from back of wing
# Calculate angle between x axis and pt 10 (rotate about y)
# Project onto yaxis & make negative if k2 > 0
i3 = dat_clean$pt10_X
k3 = dat_clean$pt10_Z
dot_xaxis = i3
vec_norm  = sqrt(i3^2 + k3^2)
interior  = dot_xaxis/vec_norm
thetay = -acos(interior)
thetay[which(k3 > 0)] = acos(interior[which(k3 > 0)])
#thetay[which(dat_clean$pt2_X < 0)] = thetay[which(dat_clean$pt2_X < 0)] + pi
# Rotate about the y axis
tmp <- dat_clean
for (j in 1:11){
for (k in 1:3){
col_name = paste(point_list[j],dim_list[k],sep = "_")
if (k == 1){
dat_clean[,col_name] = cos(thetay) * tmp[,col_name] + sin(thetay) * tmp[,paste(point_list[j],dim_list[3],sep = "_")]
} else{
if(k == 3){
dat_clean[,col_name] = -sin(thetay) * tmp[,paste(point_list[j],dim_list[1],sep = "_")] + cos(thetay) * tmp[,col_name]
}
}
}
}
# CAUTION: Verify that Pt10Z=z_adj3=0 after this step - View(subset(pts,Pt.No == 10))
#------------------------------- Step 5 -------------------------------
# x = -x; y = y; z =  z:
# col_liv_20_0300R_002 & 004
# col_liv_20_0281R_001
# x = -x; y = y; z = -z:
# ard_her_20_317L_001
for (j in 1:11) {
col_name = paste(point_list[j], dim_list[1], sep = "_")
dat_clean[, col_name] <- -dat_clean[, col_name]
if(wing == "R"){
col_name = paste(point_list[j], dim_list[3], sep = "_")
dat_clean[, col_name] <- -dat_clean[, col_name]
}
}
plot(dat_clean$pt2_Y[m],dat_clean$pt2_X[m], xlim =c(-max,max), ylim = c(-max,max))
points(dat_clean$pt3_Y[m],dat_clean$pt3_X[m],xlim =c(-max,max), ylim = c(-max,max),col = "blue")
points(dat_clean$pt4_Y[m], dat_clean$pt4_X[m], xlim =c(-max,max), ylim = c(-max,max), col = "green")
points(dat_clean$pt1_Y[m],dat_clean$pt1_X[m], xlim =c(-max,max), ylim = c(-max,max), col = "red")
points(dat_clean$pt8_Y[m],dat_clean$pt8_X[m], xlim =c(-max,max), ylim = c(-max,max), col = "purple")
points(dat_clean$pt11_Y[m],dat_clean$pt11_X[m], xlim =c(-max,max), ylim = c(-max,max), col = "yellow")
plot(dat_clean$pt2_Y[m],dat_clean$pt2_Z[m], xlim =c(-max,max), ylim = c(-max,max))
points(dat_clean$pt3_Y[m],dat_clean$pt3_Z[m],xlim =c(-max,max), ylim = c(-max,max),col = "blue")
points(dat_clean$pt4_Y[m], dat_clean$pt4_Z[m], xlim =c(-max,max), ylim = c(-max,max), col = "green")
points(dat_clean$pt8_Y[m],dat_clean$pt8_Z[m], xlim =c(-max,max), ylim = c(-max,max), col = "purple")
points(dat_clean$pt11_Y[m],dat_clean$pt11_Z[m], xlim =c(-max,max), ylim = c(-max,max), col = "yellow")
points(dat_clean$pt1_Y[m],dat_clean$pt1_Z[m], xlim =c(-max,max), ylim = c(-max,max), col = "red")
setwd("/Users/christinaharvey/Google Drive/DoctoralThesis/WingMorphology/")
source('jointangles.R')
# ------------------------- Set file directory -------------------------
setwd("/Users/christinaharvey/Dropbox (University of Michigan)/Bird Mass Distribution/05_subsampled_optitrack")
# ----------------- Define set variables ------------
point_list <- c("pt1","pt2","pt3","pt4","pt6","pt7","pt8","pt9","pt10","pt11","pt12")
dim_list   <- c("X","Y","Z")
xaxis <- c(1, 0, 0)
yaxis <- c(0, 1, 0)
zaxis <- c(0, 0, 1)
# ------------------------- Read in data -------------------------
dat_info   <- read.csv(file = "2020_12_15_IDfile.csv")
for (i in 1:nrow(dat_info)){
# Read in specific wing data
filename <- paste("2020_12_15_",dat_info$species[i],"_",dat_info$birdid[i],"_00",dat_info$testid[i],"_subsampled.csv",sep = "")
wing = str_sub(dat_info$birdid[i],-1)
rawdat   <- read.csv(filename, stringsAsFactors = FALSE, strip.white = TRUE, na.strings = c("NA") )
if (i < 12){
rawdat[,3:35] <- rawdat[,3:35]/1000}  #First few are in mm
# check ulna/radius length to be sure on units
dat_info$ur_length[i] = mean(sqrt((rawdat$pt3_X - rawdat$pt2_X)^2 + (rawdat$pt3_Y - rawdat$pt2_Y)^2 + (rawdat$pt3_Z - rawdat$pt2_Z)^2))
## ------- Reorient Wings ---------
dat_clean <- rawdat
#------------------------------- Step 1 -------------------------------
##### error doesn't adjust all points ######
#Make pt 1 on humerus the beginning location
for (j in 2:11){
for (k in 1:3){
col_name = paste(point_list[j],dim_list[k],sep = "_")
pt1_name = paste(point_list[1],dim_list[k],sep = "_")
dat_clean[,col_name] <- dat_clean[,col_name] - dat_clean[,pt1_name]
}
}
dat_clean[,c("pt1_X","pt1_Y","pt1_Z")] <- 0
#-------------------------------  Step 2 -------------------------------
# Set pt 3 in line with Pt 1 along the wingspan
#Calculate angle between axis that runs along wing length and pt 3 (rotate about z)
#Project onto xaxis & make negative if j1 > 0:
i1 = dat_clean$pt3_X
j1 = dat_clean$pt3_Y
dot_xaxis = i1
vec_norm  = sqrt(i1^2 + j1^2)
interior  = dot_xaxis/vec_norm
thetaz    = acos(interior) + pi / 2
thetaz[which(j1 > 0)] = -acos(interior[which(j1 > 0)]) + pi / 2
# Rotate about the z axis
tmp <- dat_clean
for (j in 1:11){
for (k in 1:3){
col_name = paste(point_list[j],dim_list[k],sep = "_")
if (k == 1){
dat_clean[,col_name] = cos(thetaz) * tmp[,col_name] - sin(thetaz) * tmp[,paste(point_list[j],dim_list[2],sep = "_")]
} else{
if(k == 2){
dat_clean[,col_name] = sin(thetaz) * tmp[,paste(point_list[j],dim_list[1],sep = "_")] + cos(thetaz) * tmp[,col_name]
}
}
}
}
# CAUTION: Verify that Pt3X=x_adj1=0 after this step - View(subset(pts,Pt.No == 3))
#------------------------------- Step 3 -------------------------------
# Set pt 3 in line with Pt 1 looking down the length of wing
# Calculate angle between x axis and pt 3 (rotate about y)
# Project onto xaxis & make negative if k2 > 0
j2 = dat_clean$pt3_Y
k2 = dat_clean$pt3_Z
dot_yaxis = j2
vec_norm  = sqrt(j2^2 + k2^2)
interior = dot_yaxis/vec_norm
thetax = acos(interior)
thetax[which(k2 > 0)] = -acos(interior[which(k2 > 0)])
# Rotate about the x axis
tmp <- dat_clean
for (j in 1:11){
for (k in 1:3){
col_name = paste(point_list[j],dim_list[k],sep = "_")
if (k == 2){
dat_clean[,col_name] = cos(thetax) * tmp[,col_name] - sin(thetax) * tmp[,paste(point_list[j],dim_list[3],sep = "_")]
} else{
if(k == 3){
dat_clean[,col_name] = sin(thetax) * tmp[,paste(point_list[j],dim_list[2],sep = "_")] + cos(thetax) * tmp[,col_name]
}
}
}
}
# CAUTION: Verify that Pt3Z=z_adj2=0 after this step - View(subset(pts,Pt.No == 3))
#------------------------------- Step 4 -------------------------------
# Set pt 10 in line with Pt 3 looking from back of wing
# Calculate angle between x axis and pt 10 (rotate about y)
# Project onto yaxis & make negative if k2 > 0
i3 = dat_clean$pt10_X
k3 = dat_clean$pt10_Z
dot_xaxis = i3
vec_norm  = sqrt(i3^2 + k3^2)
interior  = dot_xaxis/vec_norm
thetay = -acos(interior)
thetay[which(k3 > 0)] = acos(interior[which(k3 > 0)])
#thetay[which(dat_clean$pt2_X < 0)] = thetay[which(dat_clean$pt2_X < 0)] + pi
# Rotate about the y axis
tmp <- dat_clean
for (j in 1:11){
for (k in 1:3){
col_name = paste(point_list[j],dim_list[k],sep = "_")
if (k == 1){
dat_clean[,col_name] = cos(thetay) * tmp[,col_name] + sin(thetay) * tmp[,paste(point_list[j],dim_list[3],sep = "_")]
} else{
if(k == 3){
dat_clean[,col_name] = -sin(thetay) * tmp[,paste(point_list[j],dim_list[1],sep = "_")] + cos(thetay) * tmp[,col_name]
}
}
}
}
# CAUTION: Verify that Pt10Z=z_adj3=0 after this step - View(subset(pts,Pt.No == 10))
#------------------------------- Step 5 -------------------------------
# x = -x; y = y; z =  z:
# col_liv_20_0300R_002 & 004
# col_liv_20_0281R_001
# x = -x; y = y; z = -z:
# ard_her_20_317L_001
for (j in 1:11) {
col_name = paste(point_list[j], dim_list[1], sep = "_")
dat_clean[, col_name] <- -dat_clean[, col_name]
if(wing == "R"){
col_name = paste(point_list[j], dim_list[3], sep = "_")
dat_clean[, col_name] <- -dat_clean[, col_name]
}
}
# ------------------------------ Save data
filename_new <- paste("2020_01_14_",dat_info$species[i],"_",dat_info$birdid[i],"_00",dat_info$testid[i],"_aligned.csv",sep = "")
write.csv(dat_clean,filename_new)
}
devtools::load_all()
# --------------------- Read in data -----------------------
# CAUTION: All incoming measurements must be in SI units; adjust as required
# UPDATE REQUIRED: Should probably move final run files into the bird moment folder
path_data_folder = "/Users/christinaharvey/Dropbox (University of Michigan)/Bird Mass Distribution/rundata/"
# identification info on each of the individual specimens
dat_ind      = read.csv(file = paste(path_data_folder,"2020_12_15_IDfile.csv",sep= ""))
# all of the non-wing based measurements for all specimens - NEED TO RESAVE THIS - ALSO NEED TO CORRECT ONE ID NUMBER TO MATCH FEATHERS
dat_bird     = readxl::read_xlsx(paste(path_data_folder,"2020_12_19_bird_measurements.xlsx",sep= ""), sheet = 'Major body parts')
# all of the wing based measurements for all specimens
dat_wingspec = readxl::read_xlsx(paste(path_data_folder,"2020_12_19_bird_measurements.xlsx",sep= ""), sheet = 'Within wings')
# all of the feather measurements for one specimen of each species
dat_feat     = readxl::read_xlsx(paste(path_data_folder,"2021_01_13_trackingsheet.xlsx",sep= ""), sheet = 'FeatherData')
# all of the barb measurements for each species baed on measurements from previous studies
dat_barb     = readxl::read_xlsx(paste(path_data_folder,"2021_01_13_trackingsheet.xlsx",sep= ""), sheet = 'BarbInfo')
# ----------------- Clean Data -----------------------
# -- Clean up the data set relating to each individual specimen --
# Save info about whether this is a right or left wing
dat_ind$wing_side <- stringr::str_sub(dat_ind$birdid, -1)
dat_ind$BirdID    <- stringr::str_sub(dat_ind$birdid, 1, stringr::str_length(dat_ind$birdid)-1)
# -- Clean up the data set relating to full bird measurements of each individual specimen--
dat_bird$species <- NA
dat_bird$BirdID  <- NA
for (i in 1:nrow(dat_bird)){
if (strsplit(dat_bird$bird_id, "_")[[i]][1] == "COLLI"){
dat_bird$species[i] = "col_liv"
dat_bird$BirdID[i]  = paste(strsplit(dat_bird$bird_id, "_")[[i]][2],strsplit(dat_bird$bird_id, "_")[[i]][3], sep = "_")
}else{
dat_bird$species[i] = paste(tolower(strsplit(dat_bird$bird_id, "_")[[i]][1]),strsplit(dat_bird$bird_id, "_")[[i]][2], sep = "_")
dat_bird$BirdID[i]  = paste(strsplit(dat_bird$bird_id, "_")[[i]][3],strsplit(dat_bird$bird_id, "_")[[i]][4], sep = "_")
}
}
# -- Clean up the data set relating to the wing specific measurements for each individual specimen --
dat_wingspec$species <- NA
dat_wingspec$BirdID  <- NA
for (i in 1:nrow(dat_wingspec)){
if (strsplit(dat_wingspec$bird_id, "_")[[i]][1] == "COLLI"){
dat_wingspec$species[i] = "col_liv"
dat_wingspec$BirdID[i]  = paste(strsplit(dat_wingspec$bird_id, "_")[[i]][2],strsplit(dat_wingspec$bird_id, "_")[[i]][3], sep = "_")
}else{
dat_wingspec$species[i] = paste(tolower(strsplit(dat_wingspec$bird_id, "_")[[i]][1]),strsplit(dat_wingspec$bird_id, "_")[[i]][2], sep = "_")
dat_wingspec$BirdID[i]  = paste(strsplit(dat_wingspec$bird_id, "_")[[i]][3],strsplit(dat_wingspec$bird_id, "_")[[i]][4], sep = "_")
}
}
# Merge the wing specific measurements with the full bird measurements
dat_bird <- merge(dat_bird,dat_wingspec, by = c("species","BirdID"))
# Correct all the units in the data frame to SI
for (i in 1:length(colnames(dat_bird))){
# Adjust all masses to be in kg
if (grepl("mass_g",colnames(dat_bird)[i],fixed=TRUE)){
dat_bird[,i] = dat_bird[,i]/1000
}
# Adjust all lengths to be in m
if (grepl("_cm",colnames(dat_bird)[i],fixed=TRUE)){
dat_bird[,i] = dat_bird[,i]/100
}
# Adjust all lengths to be in m
if (grepl("_mm",colnames(dat_bird)[i],fixed=TRUE)){
dat_bird[,i] = dat_bird[,i]/1000
}
}
#Rename columns as necessary
names(dat_bird)[names(dat_bird) == "humerus_muscles_mass_g"] <- "brachial_muscle_mass"
names(dat_bird)[names(dat_bird) == "raduln_muscles_mass_g"]  <- "antebrachial_muscle_mass"
names(dat_bird)[names(dat_bird) == "cmc_muscles_mass_g"]     <- "manus_muscle_mass"
names(dat_bird)[names(dat_bird) == "whole_body_mass_g"]      <- "total_bird_mass"
names(dat_bird)[names(dat_bird) == "tert_feathers_mass_g"]   <- "tertiary_mass"
names(dat_bird)[names(dat_bird) == "skin_coverts_mass_g"]    <- "all_skin_coverts_mass"
names(dat_bird)[names(dat_bird) == "head_length_cm"]             <- "head_length"
names(dat_bird)[names(dat_bird) == "head_mass_g"]                <- "head_mass"
names(dat_bird)[names(dat_bird) == "head_height_max_cm"]         <- "head_height"
names(dat_bird)[names(dat_bird) == "neck_mass_g"]                <- "neck_mass"
names(dat_bird)[names(dat_bird) == "neck_width_cm"]              <- "neck_width"
names(dat_bird)[names(dat_bird) == "neck_length_cm"]             <- "neck_length"
names(dat_bird)[names(dat_bird) == "torsotail_length_cm"]        <- "torsotail_length"
names(dat_bird)[names(dat_bird) == "torsotail_mass_g"]           <- "torsotail_mass"
names(dat_bird)[names(dat_bird) == "tail_length_cm"]             <- "tail_length"
names(dat_bird)[names(dat_bird) == "tail_width_cm"]              <- "tail_width"
names(dat_bird)[names(dat_bird) == "right_leg_mass_g"]           <- "right_leg_mass"
names(dat_bird)[names(dat_bird) == "left_leg_mass_"]             <- "left_leg_mass"
names(dat_bird)[names(dat_bird) == "body_width_max_cm"]          <- "body_width_max"
names(dat_bird)[names(dat_bird) == "width_at_leg_insert_cm"]     <- "body_width_at_leg_insert"
names(dat_bird)[names(dat_bird) == "x_loc_of_body_max_cm"]       <- "x_loc_of_body_max"
names(dat_bird)[names(dat_bird) == "tail_width_cm"]              <- "tail_width"
names(dat_bird)[names(dat_bird) == "x_loc_leg_insertion_cm"]     <- "x_loc_leg_insertion"
names(dat_bird)[names(dat_bird) == "x_loc_TorsotailCoG_cm"]      <- "x_loc_TorsotailCoG"
names(dat_bird)[names(dat_bird) == "z_loc_TorsotailCoG_cm"]      <- "z_loc_TorsotailCoG"
names(dat_bird)[names(dat_bird) == "x_loc_of_humeral_insert_cm"] <- "x_loc_humeral_insert"
names(dat_bird)[names(dat_bird) == "y_loc_of_humeral_insert_cm"] <- "y_loc_humeral_insert"
names(dat_bird)[names(dat_bird) == "z_loc_of_humeral_insert_cm"] <- "z_loc_humeral_insert"
names(dat_bird)[names(dat_bird) == "whole_body_mass_g"]          <- "total_bird_mass"
#Correct the sign of the x measurement
dat_bird$x_loc_TorsotailCoG = - dat_bird$x_loc_TorsotailCoG
# save a singular wing mass - left if that is the one measured right otherwise
dat_bird$wing_mass <-dat_bird$left_wing_mass_g
for (i in 1:nrow(dat_bird)){
if (dat_bird$right_or_left[i] == "Right"){
dat_bird$wing_mass[i] = dat_bird$right_wing_mass_g[i]
}
}
## ----- Adjust the feather input properties ----------
# Update to include the barb information within the species specific info
dat_barb$barb_distance <- dat_barb$barb_distance_um*10^-6
dat_barb$barb_radius   <- dat_barb$barb_radius_um*10^-6
dat_bird <- merge(dat_bird,dat_barb, by=c("species"))
# need the calamus angle to be positive (i.e. from start of vane to tip of calamus)
for (k in 1:nrow(dat_feat[which(dat_feat$Component == "calamus length"),c("Angle")])){
if (dat_feat[which(dat_feat$Component == "calamus length"),c("Angle")][k,1] < 0){
dat_feat[which(dat_feat$Component == "calamus length"),c("Angle")][k,1] = 180 + dat_feat[which(dat_feat$Component == "calamus length"),c("Angle")][k,1]
}
}
# need the vane angle to be negative (i.e. from start of vane to tip of feather)
for (k in 1:nrow(dat_feat[which(dat_feat$Component == "vane length"),c("Angle")])){
if (dat_feat[which(dat_feat$Component == "vane length"),c("Angle")][k,1] > 0){
dat_feat[which(dat_feat$Component == "vane length"),c("Angle")][k,1] = dat_feat[which(dat_feat$Component == "vane length"),c("Angle")][k,1] - 180
}
}
# define all assumed material properties
dat_mat = list()
dat_mat$material  =	c("Muscle", "Bone", "Skin", "Cortex", "Medullary")
dat_mat$density   = c(1100, 2060, 1060, 660, 37)
# CHECK THAT THIS IS THE CORRECT PROPORTION AND LIST ALL REFERENCES
# --------------------- Initialize variables -----------------------
all_data = as.data.frame(matrix(0, nrow = 0, ncol = 7)) # overall data
column_names = c("species","BirdID","TestID","FrameID","prop_type","component","value")
colnames(all_data) = column_names
specimens <- unique(dat_ind[,c("species","BirdID")])
