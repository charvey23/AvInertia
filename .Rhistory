# Rotate about the z axis
tmp <- dat_clean
for (j in 1:11){
for (k in 1:3){
col_name = paste(point_list[j],dim_list[k],sep = "_")
if (k == 1){
dat_clean[,col_name] = cos(thetaz) * tmp[,col_name] - sin(thetaz) * tmp[,paste(point_list[j],dim_list[2],sep = "_")]
} else{
if(k == 2){
dat_clean[,col_name] = sin(thetaz) * tmp[,paste(point_list[j],dim_list[1],sep = "_")] + cos(thetaz) * tmp[,col_name]
}
}
}
}
# CAUTION: Verify that Pt3X=x_adj1=0 after this step - View(subset(pts,Pt.No == 3))
#------------------------------- Step 3 -------------------------------
# Set pt 3 in line with Pt 1 looking down the length of wing
# Calculate angle between x axis and pt 3 (rotate about y)
# Project onto xaxis & make negative if k2 > 0
j2 = dat_clean$pt3_Y
k2 = dat_clean$pt3_Z
dot_yaxis = j2
vec_norm  = sqrt(j2^2 + k2^2)
interior = dot_yaxis/vec_norm
thetax = acos(interior)
thetax[which(k2 > 0)] = -acos(interior[which(k2 > 0)])
# Rotate about the x axis
tmp <- dat_clean
for (j in 1:11){
for (k in 1:3){
col_name = paste(point_list[j],dim_list[k],sep = "_")
if (k == 2){
dat_clean[,col_name] = cos(thetax) * tmp[,col_name] - sin(thetax) * tmp[,paste(point_list[j],dim_list[3],sep = "_")]
} else{
if(k == 3){
dat_clean[,col_name] = sin(thetax) * tmp[,paste(point_list[j],dim_list[2],sep = "_")] + cos(thetax) * tmp[,col_name]
}
}
}
}
# CAUTION: Verify that Pt3Z=z_adj2=0 after this step - View(subset(pts,Pt.No == 3))
#------------------------------- Step 4 -------------------------------
# Set pt 10 in line with Pt 3 looking from back of wing
# Calculate angle between x axis and pt 10 (rotate about y)
# Project onto yaxis & make negative if k2 > 0: Gull 16-0048
i3 = dat_clean$pt10_X
k3 = dat_clean$pt10_Z
dot_xaxis = i3
vec_norm  = sqrt(i3^2 + k3^2)
interior  = dot_xaxis/vec_norm
thetay = -acos(interior)
thetay[which(k3 > 0)] = acos(interior[which(k3 > 0)])
#thetay[which(dat_clean$pt2_X < 0)] = thetay[which(dat_clean$pt2_X < 0)] + pi
# Rotate about the y axis
tmp <- dat_clean
for (j in 1:11){
for (k in 1:3){
col_name = paste(point_list[j],dim_list[k],sep = "_")
if (k == 1){
dat_clean[,col_name] = cos(thetay) * tmp[,col_name] + sin(thetay) * tmp[,paste(point_list[j],dim_list[3],sep = "_")]
} else{
if(k == 3){
dat_clean[,col_name] = -sin(thetay) * tmp[,paste(point_list[j],dim_list[1],sep = "_")] + cos(thetay) * tmp[,col_name]
}
}
}
}
# CAUTION: Verify that Pt10Z=z_adj3=0 after this step - View(subset(pts,Pt.No == 10))
#------------------------------- Step 5 -------------------------------
# x = -x; y = y; z =  z:
# col_liv_20_0300R_002 & 004
# col_liv_20_0281R_001
# x = -x; y = y; z = -z:
# ard_her_20_317L_001
for (j in 1:11){
for (k in c(1,3)){
col_name = paste(point_list[j],dim_list[k],sep = "_")
dat_clean[,col_name] <- -dat_clean[,col_name]
}
}
m = 1:868
max = 0.5
plot(dat_clean$pt2_X[m],dat_clean$pt2_Y[m], xlim =c(-max,max), ylim = c(-max,max))
points(dat_clean$pt3_X[m],dat_clean$pt3_Y[m],xlim =c(-max,max), ylim = c(-max,max),col = "blue")
points(dat_clean$pt4_X[m], dat_clean$pt4_Y[m], xlim =c(-max,max), ylim = c(-max,max), col = "green")
points(dat_clean$pt1_X[m],dat_clean$pt1_Y[m], xlim =c(-max,max), ylim = c(-max,max), col = "red")
points(dat_clean$pt8_X[m],dat_clean$pt8_Y[m], xlim =c(-max,max), ylim = c(-max,max), col = "purple")
plot(dat_clean$pt2_Z[m],dat_clean$pt2_Y[m], xlim =c(-max,max), ylim = c(-max,max))
points(dat_clean$pt3_Z[m],dat_clean$pt3_Y[m],xlim =c(-max,max), ylim = c(-max,max),col = "blue")
points(dat_clean$pt4_Z[m], dat_clean$pt4_Y[m], xlim =c(-max,max), ylim = c(-max,max), col = "green")
points(dat_clean$pt1_Z[m],dat_clean$pt1_Y[m], xlim =c(-max,max), ylim = c(-max,max), col = "red")
points(dat_clean$pt8_Z[m],dat_clean$pt8_Y[m], xlim =c(-max,max), ylim = c(-max,max), col = "purple")
# ------------------------------ Save data
filename_new <- paste("2020_12_15_",dat_info$species[i],"_",dat_info$birdid[i],"_00",dat_info$testid[i],"_aligned.csv",sep = "")
write.csv(dat_clean,filename_new)
i = 6
# Read in specific wing data
filename <- paste("2020_12_15_",dat_info$species[i],"_",dat_info$birdid[i],"_00",dat_info$testid[i],"_subsampled.csv",sep = "")
rawdat   <- read.csv(filename, stringsAsFactors = FALSE, strip.white = TRUE, na.strings = c("NA") )
if (i < 12){
rawdat[,3:35] <- rawdat[,3:35]/1000}  #First few are in mm
# check ulna/radius length to be sure on units
dat_info$ur_length[i] = mean(sqrt((rawdat$pt3_X - rawdat$pt2_X)^2 + (rawdat$pt3_Y - rawdat$pt2_Y)^2 + (rawdat$pt3_Z - rawdat$pt2_Z)^2))
## ------- Reorient Wings ---------
dat_clean <- rawdat
#------------------------------- Step 1 -------------------------------
#Make pt 1 on humerus the beginning location
for (j in 1:11){
for (k in 1:3){
col_name = paste(point_list[j],dim_list[k],sep = "_")
pt1_name = paste(point_list[1],dim_list[k],sep = "_")
dat_clean[,col_name] <- dat_clean[,col_name] - dat_clean[,pt1_name]
}
}
#-------------------------------  Step 2 -------------------------------
# Set pt 3 in line with Pt 1 along the wingspan
#Calculate angle between axis that runs along wing length and pt 3 (rotate about z)
#Project onto xaxis & make negative if j1 > 0:
i1 = dat_clean$pt3_X
j1 = dat_clean$pt3_Y
dot_xaxis = i1
vec_norm  = sqrt(i1^2 + j1^2)
interior  = dot_xaxis/vec_norm
thetaz    = acos(interior) + pi / 2
thetaz[which(j1 > 0)] = -acos(interior[which(j1 > 0)]) + pi / 2
# Rotate about the z axis
tmp <- dat_clean
for (j in 1:11){
for (k in 1:3){
col_name = paste(point_list[j],dim_list[k],sep = "_")
if (k == 1){
dat_clean[,col_name] = cos(thetaz) * tmp[,col_name] - sin(thetaz) * tmp[,paste(point_list[j],dim_list[2],sep = "_")]
} else{
if(k == 2){
dat_clean[,col_name] = sin(thetaz) * tmp[,paste(point_list[j],dim_list[1],sep = "_")] + cos(thetaz) * tmp[,col_name]
}
}
}
}
# CAUTION: Verify that Pt3X=x_adj1=0 after this step - View(subset(pts,Pt.No == 3))
#------------------------------- Step 3 -------------------------------
# Set pt 3 in line with Pt 1 looking down the length of wing
# Calculate angle between x axis and pt 3 (rotate about y)
# Project onto xaxis & make negative if k2 > 0
j2 = dat_clean$pt3_Y
k2 = dat_clean$pt3_Z
dot_yaxis = j2
vec_norm  = sqrt(j2^2 + k2^2)
interior = dot_yaxis/vec_norm
thetax = acos(interior)
thetax[which(k2 > 0)] = -acos(interior[which(k2 > 0)])
# Rotate about the x axis
tmp <- dat_clean
for (j in 1:11){
for (k in 1:3){
col_name = paste(point_list[j],dim_list[k],sep = "_")
if (k == 2){
dat_clean[,col_name] = cos(thetax) * tmp[,col_name] - sin(thetax) * tmp[,paste(point_list[j],dim_list[3],sep = "_")]
} else{
if(k == 3){
dat_clean[,col_name] = sin(thetax) * tmp[,paste(point_list[j],dim_list[2],sep = "_")] + cos(thetax) * tmp[,col_name]
}
}
}
}
# CAUTION: Verify that Pt3Z=z_adj2=0 after this step - View(subset(pts,Pt.No == 3))
#------------------------------- Step 4 -------------------------------
# Set pt 10 in line with Pt 3 looking from back of wing
# Calculate angle between x axis and pt 10 (rotate about y)
# Project onto yaxis & make negative if k2 > 0: Gull 16-0048
i3 = dat_clean$pt10_X
k3 = dat_clean$pt10_Z
dot_xaxis = i3
vec_norm  = sqrt(i3^2 + k3^2)
interior  = dot_xaxis/vec_norm
thetay = -acos(interior)
thetay[which(k3 > 0)] = acos(interior[which(k3 > 0)])
#thetay[which(dat_clean$pt2_X < 0)] = thetay[which(dat_clean$pt2_X < 0)] + pi
# Rotate about the y axis
tmp <- dat_clean
for (j in 1:11){
for (k in 1:3){
col_name = paste(point_list[j],dim_list[k],sep = "_")
if (k == 1){
dat_clean[,col_name] = cos(thetay) * tmp[,col_name] + sin(thetay) * tmp[,paste(point_list[j],dim_list[3],sep = "_")]
} else{
if(k == 3){
dat_clean[,col_name] = -sin(thetay) * tmp[,paste(point_list[j],dim_list[1],sep = "_")] + cos(thetay) * tmp[,col_name]
}
}
}
}
# CAUTION: Verify that Pt10Z=z_adj3=0 after this step - View(subset(pts,Pt.No == 10))
#------------------------------- Step 5 -------------------------------
# x = -x; y = y; z =  z:
# col_liv_20_0300R_002 & 004
# col_liv_20_0281R_001
# x = -x; y = y; z = -z:
# ard_her_20_317L_001
for (j in 1:11){
for (k in c(1,3)){
col_name = paste(point_list[j],dim_list[k],sep = "_")
dat_clean[,col_name] <- -dat_clean[,col_name]
}
}
m = 1:581
max = 0.5
plot(dat_clean$pt2_X[m],dat_clean$pt2_Y[m], xlim =c(-max,max), ylim = c(-max,max))
points(dat_clean$pt3_X[m],dat_clean$pt3_Y[m],xlim =c(-max,max), ylim = c(-max,max),col = "blue")
points(dat_clean$pt4_X[m], dat_clean$pt4_Y[m], xlim =c(-max,max), ylim = c(-max,max), col = "green")
points(dat_clean$pt1_X[m],dat_clean$pt1_Y[m], xlim =c(-max,max), ylim = c(-max,max), col = "red")
points(dat_clean$pt8_X[m],dat_clean$pt8_Y[m], xlim =c(-max,max), ylim = c(-max,max), col = "purple")
plot(dat_clean$pt2_Z[m],dat_clean$pt2_Y[m], xlim =c(-max,max), ylim = c(-max,max))
points(dat_clean$pt3_Z[m],dat_clean$pt3_Y[m],xlim =c(-max,max), ylim = c(-max,max),col = "blue")
points(dat_clean$pt4_Z[m], dat_clean$pt4_Y[m], xlim =c(-max,max), ylim = c(-max,max), col = "green")
points(dat_clean$pt1_Z[m],dat_clean$pt1_Y[m], xlim =c(-max,max), ylim = c(-max,max), col = "red")
points(dat_clean$pt8_Z[m],dat_clean$pt8_Y[m], xlim =c(-max,max), ylim = c(-max,max), col = "purple")
max = 0.6
plot(dat_clean$pt2_X[m],dat_clean$pt2_Y[m], xlim =c(-max,max), ylim = c(-max,max))
points(dat_clean$pt3_X[m],dat_clean$pt3_Y[m],xlim =c(-max,max), ylim = c(-max,max),col = "blue")
points(dat_clean$pt4_X[m], dat_clean$pt4_Y[m], xlim =c(-max,max), ylim = c(-max,max), col = "green")
points(dat_clean$pt1_X[m],dat_clean$pt1_Y[m], xlim =c(-max,max), ylim = c(-max,max), col = "red")
points(dat_clean$pt8_X[m],dat_clean$pt8_Y[m], xlim =c(-max,max), ylim = c(-max,max), col = "purple")
plot(dat_clean$elbow,dat_clean$manus)
plot(dat_clean$pt2_X[m],dat_clean$pt2_Y[m], xlim =c(-max,max), ylim = c(-max,max))
points(dat_clean$pt3_X[m],dat_clean$pt3_Y[m],xlim =c(-max,max), ylim = c(-max,max),col = "blue")
points(dat_clean$pt4_X[m], dat_clean$pt4_Y[m], xlim =c(-max,max), ylim = c(-max,max), col = "green")
points(dat_clean$pt1_X[m],dat_clean$pt1_Y[m], xlim =c(-max,max), ylim = c(-max,max), col = "red")
points(dat_clean$pt8_X[m],dat_clean$pt8_Y[m], xlim =c(-max,max), ylim = c(-max,max), col = "purple")
plot(dat_clean$pt2_Z[m],dat_clean$pt2_Y[m], xlim =c(-max,max), ylim = c(-max,max))
points(dat_clean$pt3_Z[m],dat_clean$pt3_Y[m],xlim =c(-max,max), ylim = c(-max,max),col = "blue")
points(dat_clean$pt4_Z[m], dat_clean$pt4_Y[m], xlim =c(-max,max), ylim = c(-max,max), col = "green")
points(dat_clean$pt1_Z[m],dat_clean$pt1_Y[m], xlim =c(-max,max), ylim = c(-max,max), col = "red")
points(dat_clean$pt8_Z[m],dat_clean$pt8_Y[m], xlim =c(-max,max), ylim = c(-max,max), col = "purple")
i = 7
# ------------------------------ Save data
filename_new <- paste("2020_12_15_",dat_info$species[i],"_",dat_info$birdid[i],"_00",dat_info$testid[i],"_aligned.csv",sep = "")
write.csv(dat_clean,filename_new)
i = 6
# Read in specific wing data
filename <- paste("2020_12_15_",dat_info$species[i],"_",dat_info$birdid[i],"_00",dat_info$testid[i],"_subsampled.csv",sep = "")
rawdat   <- read.csv(filename, stringsAsFactors = FALSE, strip.white = TRUE, na.strings = c("NA") )
if (i < 12){
rawdat[,3:35] <- rawdat[,3:35]/1000}  #First few are in mm
# check ulna/radius length to be sure on units
dat_info$ur_length[i] = mean(sqrt((rawdat$pt3_X - rawdat$pt2_X)^2 + (rawdat$pt3_Y - rawdat$pt2_Y)^2 + (rawdat$pt3_Z - rawdat$pt2_Z)^2))
## ------- Reorient Wings ---------
dat_clean <- rawdat
#------------------------------- Step 1 -------------------------------
#Make pt 1 on humerus the beginning location
for (j in 1:11){
for (k in 1:3){
col_name = paste(point_list[j],dim_list[k],sep = "_")
pt1_name = paste(point_list[1],dim_list[k],sep = "_")
dat_clean[,col_name] <- dat_clean[,col_name] - dat_clean[,pt1_name]
}
}
#-------------------------------  Step 2 -------------------------------
# Set pt 3 in line with Pt 1 along the wingspan
#Calculate angle between axis that runs along wing length and pt 3 (rotate about z)
#Project onto xaxis & make negative if j1 > 0:
i1 = dat_clean$pt3_X
j1 = dat_clean$pt3_Y
dot_xaxis = i1
vec_norm  = sqrt(i1^2 + j1^2)
interior  = dot_xaxis/vec_norm
thetaz    = acos(interior) + pi / 2
thetaz[which(j1 > 0)] = -acos(interior[which(j1 > 0)]) + pi / 2
# Rotate about the z axis
tmp <- dat_clean
for (j in 1:11){
for (k in 1:3){
col_name = paste(point_list[j],dim_list[k],sep = "_")
if (k == 1){
dat_clean[,col_name] = cos(thetaz) * tmp[,col_name] - sin(thetaz) * tmp[,paste(point_list[j],dim_list[2],sep = "_")]
} else{
if(k == 2){
dat_clean[,col_name] = sin(thetaz) * tmp[,paste(point_list[j],dim_list[1],sep = "_")] + cos(thetaz) * tmp[,col_name]
}
}
}
}
# CAUTION: Verify that Pt3X=x_adj1=0 after this step - View(subset(pts,Pt.No == 3))
#------------------------------- Step 3 -------------------------------
# Set pt 3 in line with Pt 1 looking down the length of wing
# Calculate angle between x axis and pt 3 (rotate about y)
# Project onto xaxis & make negative if k2 > 0
j2 = dat_clean$pt3_Y
k2 = dat_clean$pt3_Z
dot_yaxis = j2
vec_norm  = sqrt(j2^2 + k2^2)
interior = dot_yaxis/vec_norm
thetax = acos(interior)
thetax[which(k2 > 0)] = -acos(interior[which(k2 > 0)])
# Rotate about the x axis
tmp <- dat_clean
for (j in 1:11){
for (k in 1:3){
col_name = paste(point_list[j],dim_list[k],sep = "_")
if (k == 2){
dat_clean[,col_name] = cos(thetax) * tmp[,col_name] - sin(thetax) * tmp[,paste(point_list[j],dim_list[3],sep = "_")]
} else{
if(k == 3){
dat_clean[,col_name] = sin(thetax) * tmp[,paste(point_list[j],dim_list[2],sep = "_")] + cos(thetax) * tmp[,col_name]
}
}
}
}
# CAUTION: Verify that Pt3Z=z_adj2=0 after this step - View(subset(pts,Pt.No == 3))
#------------------------------- Step 4 -------------------------------
# Set pt 10 in line with Pt 3 looking from back of wing
# Calculate angle between x axis and pt 10 (rotate about y)
# Project onto yaxis & make negative if k2 > 0: Gull 16-0048
i3 = dat_clean$pt10_X
k3 = dat_clean$pt10_Z
dot_xaxis = i3
vec_norm  = sqrt(i3^2 + k3^2)
interior  = dot_xaxis/vec_norm
thetay = -acos(interior)
thetay[which(k3 > 0)] = acos(interior[which(k3 > 0)])
#thetay[which(dat_clean$pt2_X < 0)] = thetay[which(dat_clean$pt2_X < 0)] + pi
# Rotate about the y axis
tmp <- dat_clean
for (j in 1:11){
for (k in 1:3){
col_name = paste(point_list[j],dim_list[k],sep = "_")
if (k == 1){
dat_clean[,col_name] = cos(thetay) * tmp[,col_name] + sin(thetay) * tmp[,paste(point_list[j],dim_list[3],sep = "_")]
} else{
if(k == 3){
dat_clean[,col_name] = -sin(thetay) * tmp[,paste(point_list[j],dim_list[1],sep = "_")] + cos(thetay) * tmp[,col_name]
}
}
}
}
# CAUTION: Verify that Pt10Z=z_adj3=0 after this step - View(subset(pts,Pt.No == 10))
#------------------------------- Step 5 -------------------------------
# x = -x; y = y; z =  z:
# col_liv_20_0300R_002 & 004
# col_liv_20_0281R_001
# x = -x; y = y; z = -z:
# ard_her_20_317L_001
for (j in 1:11){
for (k in c(1,3)){
col_name = paste(point_list[j],dim_list[k],sep = "_")
dat_clean[,col_name] <- -dat_clean[,col_name]
}
}
m = 1:581
max = 0.6
plot(dat_clean$pt2_X[m],dat_clean$pt2_Z[m], xlim =c(-max,max), ylim = c(-max,max))
points(dat_clean$pt3_X[m],dat_clean$pt3_Z[m],xlim =c(-max,max), ylim = c(-max,max),col = "blue")
points(dat_clean$pt4_X[m], dat_clean$pt4_Z[m], xlim =c(-max,max), ylim = c(-max,max), col = "green")
points(dat_clean$pt1_X[m],dat_clean$pt1_Z[m], xlim =c(-max,max), ylim = c(-max,max), col = "red")
points(dat_clean$pt8_X[m],dat_clean$pt8_Z[m], xlim =c(-max,max), ylim = c(-max,max), col = "purple"
)
# ------------------------------ Save data
filename_new <- paste("2020_12_15_",dat_info$species[i],"_",dat_info$birdid[i],"_00",dat_info$testid[i],"_aligned.csv",sep = "")
write.csv(dat_clean,filename_new)
i = 7
# Read in specific wing data
filename <- paste("2020_12_15_",dat_info$species[i],"_",dat_info$birdid[i],"_00",dat_info$testid[i],"_subsampled.csv",sep = "")
rawdat   <- read.csv(filename, stringsAsFactors = FALSE, strip.white = TRUE, na.strings = c("NA") )
if (i < 12){
rawdat[,3:35] <- rawdat[,3:35]/1000}  #First few are in mm
# check ulna/radius length to be sure on units
dat_info$ur_length[i] = mean(sqrt((rawdat$pt3_X - rawdat$pt2_X)^2 + (rawdat$pt3_Y - rawdat$pt2_Y)^2 + (rawdat$pt3_Z - rawdat$pt2_Z)^2))
## ------- Reorient Wings ---------
dat_clean <- rawdat
#------------------------------- Step 1 -------------------------------
#Make pt 1 on humerus the beginning location
for (j in 1:11){
for (k in 1:3){
col_name = paste(point_list[j],dim_list[k],sep = "_")
pt1_name = paste(point_list[1],dim_list[k],sep = "_")
dat_clean[,col_name] <- dat_clean[,col_name] - dat_clean[,pt1_name]
}
}
#-------------------------------  Step 2 -------------------------------
# Set pt 3 in line with Pt 1 along the wingspan
#Calculate angle between axis that runs along wing length and pt 3 (rotate about z)
#Project onto xaxis & make negative if j1 > 0:
i1 = dat_clean$pt3_X
j1 = dat_clean$pt3_Y
dot_xaxis = i1
vec_norm  = sqrt(i1^2 + j1^2)
interior  = dot_xaxis/vec_norm
thetaz    = acos(interior) + pi / 2
thetaz[which(j1 > 0)] = -acos(interior[which(j1 > 0)]) + pi / 2
# Rotate about the z axis
tmp <- dat_clean
for (j in 1:11){
for (k in 1:3){
col_name = paste(point_list[j],dim_list[k],sep = "_")
if (k == 1){
dat_clean[,col_name] = cos(thetaz) * tmp[,col_name] - sin(thetaz) * tmp[,paste(point_list[j],dim_list[2],sep = "_")]
} else{
if(k == 2){
dat_clean[,col_name] = sin(thetaz) * tmp[,paste(point_list[j],dim_list[1],sep = "_")] + cos(thetaz) * tmp[,col_name]
}
}
}
}
# CAUTION: Verify that Pt3X=x_adj1=0 after this step - View(subset(pts,Pt.No == 3))
#------------------------------- Step 3 -------------------------------
# Set pt 3 in line with Pt 1 looking down the length of wing
# Calculate angle between x axis and pt 3 (rotate about y)
# Project onto xaxis & make negative if k2 > 0
j2 = dat_clean$pt3_Y
k2 = dat_clean$pt3_Z
dot_yaxis = j2
vec_norm  = sqrt(j2^2 + k2^2)
interior = dot_yaxis/vec_norm
thetax = acos(interior)
thetax[which(k2 > 0)] = -acos(interior[which(k2 > 0)])
# Rotate about the x axis
tmp <- dat_clean
for (j in 1:11){
for (k in 1:3){
col_name = paste(point_list[j],dim_list[k],sep = "_")
if (k == 2){
dat_clean[,col_name] = cos(thetax) * tmp[,col_name] - sin(thetax) * tmp[,paste(point_list[j],dim_list[3],sep = "_")]
} else{
if(k == 3){
dat_clean[,col_name] = sin(thetax) * tmp[,paste(point_list[j],dim_list[2],sep = "_")] + cos(thetax) * tmp[,col_name]
}
}
}
}
# CAUTION: Verify that Pt3Z=z_adj2=0 after this step - View(subset(pts,Pt.No == 3))
#------------------------------- Step 4 -------------------------------
# Set pt 10 in line with Pt 3 looking from back of wing
# Calculate angle between x axis and pt 10 (rotate about y)
# Project onto yaxis & make negative if k2 > 0: Gull 16-0048
i3 = dat_clean$pt10_X
k3 = dat_clean$pt10_Z
dot_xaxis = i3
vec_norm  = sqrt(i3^2 + k3^2)
interior  = dot_xaxis/vec_norm
thetay = -acos(interior)
thetay[which(k3 > 0)] = acos(interior[which(k3 > 0)])
#thetay[which(dat_clean$pt2_X < 0)] = thetay[which(dat_clean$pt2_X < 0)] + pi
# Rotate about the y axis
tmp <- dat_clean
for (j in 1:11){
for (k in 1:3){
col_name = paste(point_list[j],dim_list[k],sep = "_")
if (k == 1){
dat_clean[,col_name] = cos(thetay) * tmp[,col_name] + sin(thetay) * tmp[,paste(point_list[j],dim_list[3],sep = "_")]
} else{
if(k == 3){
dat_clean[,col_name] = -sin(thetay) * tmp[,paste(point_list[j],dim_list[1],sep = "_")] + cos(thetay) * tmp[,col_name]
}
}
}
}
# CAUTION: Verify that Pt10Z=z_adj3=0 after this step - View(subset(pts,Pt.No == 10))
#------------------------------- Step 5 -------------------------------
# x = -x; y = y; z =  z:
# col_liv_20_0300R_002 & 004
# col_liv_20_0281R_001
# x = -x; y = y; z = -z:
# ard_her_20_317L_001
for (j in 1:11){
for (k in c(1,3)){
col_name = paste(point_list[j],dim_list[k],sep = "_")
dat_clean[,col_name] <- -dat_clean[,col_name]
}
}
m = 1:788
max = 0.6
plot(dat_clean$pt2_X[m],dat_clean$pt2_Z[m], xlim =c(-max,max), ylim = c(-max,max))
points(dat_clean$pt3_X[m],dat_clean$pt3_Z[m],xlim =c(-max,max), ylim = c(-max,max),col = "blue")
points(dat_clean$pt4_X[m], dat_clean$pt4_Z[m], xlim =c(-max,max), ylim = c(-max,max), col = "green")
points(dat_clean$pt1_X[m],dat_clean$pt1_Z[m], xlim =c(-max,max), ylim = c(-max,max), col = "red")
points(dat_clean$pt8_X[m],dat_clean$pt8_Z[m], xlim =c(-max,max), ylim = c(-max,max), col = "purple")
plot(dat_clean$pt2_Y[m],dat_clean$pt2_X[m], xlim =c(-max,max), ylim = c(-max,max))
points(dat_clean$pt3_Y[m],dat_clean$pt3_X[m],xlim =c(-max,max), ylim = c(-max,max),col = "blue")
points(dat_clean$pt4_Y[m], dat_clean$pt4_X[m], xlim =c(-max,max), ylim = c(-max,max), col = "green")
points(dat_clean$pt1_Y[m],dat_clean$pt1_X[m], xlim =c(-max,max), ylim = c(-max,max), col = "red")
points(dat_clean$pt8_Y[m],dat_clean$pt8_XZ[m], xlim =c(-max,max), ylim = c(-max,max), col = "purple")
m = 1:788
max = 0.7
plot(dat_clean$pt2_Y[m],dat_clean$pt2_X[m], xlim =c(-max,max), ylim = c(-max,max))
points(dat_clean$pt3_Y[m],dat_clean$pt3_X[m],xlim =c(-max,max), ylim = c(-max,max),col = "blue")
points(dat_clean$pt4_Y[m], dat_clean$pt4_X[m], xlim =c(-max,max), ylim = c(-max,max), col = "green")
points(dat_clean$pt1_Y[m],dat_clean$pt1_X[m], xlim =c(-max,max), ylim = c(-max,max), col = "red")
points(dat_clean$pt8_Y[m],dat_clean$pt8_XZ[m], xlim =c(-max,max), ylim = c(-max,max), col = "purple")
max = 0.9
plot(dat_clean$pt2_Y[m],dat_clean$pt2_X[m], xlim =c(-max,max), ylim = c(-max,max))
points(dat_clean$pt3_Y[m],dat_clean$pt3_X[m],xlim =c(-max,max), ylim = c(-max,max),col = "blue")
points(dat_clean$pt4_Y[m], dat_clean$pt4_X[m], xlim =c(-max,max), ylim = c(-max,max), col = "green")
points(dat_clean$pt1_Y[m],dat_clean$pt1_X[m], xlim =c(-max,max), ylim = c(-max,max), col = "red")
points(dat_clean$pt8_Y[m],dat_clean$pt8_XZ[m], xlim =c(-max,max), ylim = c(-max,max), col = "purple")
plot(dat_clean$pt8_Y[m],dat_clean$pt8_XZ[m], xlim =c(-max,max), ylim = c(-max,max), col = "purple")
View(dat_clean)
plot(dat_clean$pt2_Y[m],dat_clean$pt2_X[m], xlim =c(-max,max), ylim = c(-max,max))
points(dat_clean$pt3_Y[m],dat_clean$pt3_X[m],xlim =c(-max,max), ylim = c(-max,max),col = "blue")
points(dat_clean$pt4_Y[m], dat_clean$pt4_X[m], xlim =c(-max,max), ylim = c(-max,max), col = "green")
points(dat_clean$pt1_Y[m],dat_clean$pt1_X[m], xlim =c(-max,max), ylim = c(-max,max), col = "red")
points(dat_clean$pt8_Y[m],dat_clean$pt8_X[m], xlim =c(-max,max), ylim = c(-max,max), col = "purple")
max = 0.8
plot(dat_clean$pt2_Y[m],dat_clean$pt2_X[m], xlim =c(-max,max), ylim = c(-max,max))
points(dat_clean$pt3_Y[m],dat_clean$pt3_X[m],xlim =c(-max,max), ylim = c(-max,max),col = "blue")
points(dat_clean$pt4_Y[m], dat_clean$pt4_X[m], xlim =c(-max,max), ylim = c(-max,max), col = "green")
points(dat_clean$pt1_Y[m],dat_clean$pt1_X[m], xlim =c(-max,max), ylim = c(-max,max), col = "red")
points(dat_clean$pt8_Y[m],dat_clean$pt8_X[m], xlim =c(-max,max), ylim = c(-max,max), col = "purple")
plot(dat_clean$pt2_Y[m],dat_clean$pt2_Z[m], xlim =c(-max,max), ylim = c(-max,max))
points(dat_clean$pt3_Y[m],dat_clean$pt3_Z[m],xlim =c(-max,max), ylim = c(-max,max),col = "blue")
points(dat_clean$pt4_Y[m], dat_clean$pt4_Z[m], xlim =c(-max,max), ylim = c(-max,max), col = "green")
points(dat_clean$pt1_Y[m],dat_clean$pt1_Z[m], xlim =c(-max,max), ylim = c(-max,max), col = "red")
points(dat_clean$pt8_Y[m],dat_clean$pt8_Z[m], xlim =c(-max,max), ylim = c(-max,max), col = "purple")
