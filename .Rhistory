if (strsplit(dat_wingspec$bird_id, "_")[[i]][1] == "COLLI"){
dat_wingspec$species[i] = "col_liv"
dat_wingspec$BirdID[i]  = paste(strsplit(dat_wingspec$bird_id, "_")[[i]][2],strsplit(dat_wingspec$bird_id, "_")[[i]][3], sep = "_")
}else{
dat_wingspec$species[i] = paste(tolower(strsplit(dat_wingspec$bird_id, "_")[[i]][1]),strsplit(dat_wingspec$bird_id, "_")[[i]][2], sep = "_")
dat_wingspec$BirdID[i]  = paste(strsplit(dat_wingspec$bird_id, "_")[[i]][3],strsplit(dat_wingspec$bird_id, "_")[[i]][4], sep = "_")
}
}
strsplit(dat_ind$BirdID -1)
substr(dat_ind$BirdID, -1)
substr(dat_ind$BirdID, -1, -1)
substr(dat_ind$BirdID, 1, -1)
substr(dat_ind$BirdID, -1, -1)
substr(dat_ind$birdid, -1, -1)
substr(dat_ind$birdid, -2, -1)
substr(dat_ind$birdid, -2, -2)
dat_ind$birdid
substr(dat_ind$birdid, -1)
substr(dat_ind$birdid, 1, 1)
substr(dat_ind$birdid, 1, -1)
substr(dat_ind$birdid, -1, 1)
library(stringr)
substr(dat_ind$birdid[1], -1)
str_sub(dat_ind$birdid[1], -1)
str_sub(dat_ind$birdid[1], -1)
str_sub(dat_ind$birdid, -1)
str_sub(dat_ind$birdid, 1, str_length(dat_ind$birdid)-1)
# ----------------- Clean Data -----------------------
dat_ind$wing_side <- str_sub(dat_ind$birdid, -1)
dat_ind$BirdID    <- str_sub(dat_ind$birdid, 1, str_length(dat_ind$birdid)-1)
# ------------------------- Set file directory -------------------------
setwd("/Users/christinaharvey/Dropbox (University of Michigan)/Bird Mass Distribution/rundata")
# --------------------- Read in data -----------------------
# CAUTION: All incoming measurements must be in SI units; adjust as required
# identification info on each of the individual specimens
dat_ind      = read.csv(file = "2020_12_15_IDfile.csv")
# all of the non-wing based measurements for all specimens
dat_bird     = readxl::read_xlsx("2020_12_19_bird_measurements.xlsx", sheet = 'Major body parts')
# all of the wing based measurements for all specimens
dat_wingspec = readxl::read_xlsx("2020_12_19_bird_measurements.xlsx", sheet = 'Within wings')
# all of the feather measurements for one specimen of each species
dat_feat     = readxl::read_xlsx("2020_12_19_trackingsheet.xlsx", sheet = 'FeatherData')
# ----------------- Clean Data -----------------------
dat_ind$wing_side <- str_sub(dat_ind$birdid, -1)
dat_ind$BirdID    <- str_sub(dat_ind$birdid, 1, str_length(dat_ind$birdid)-1)
dat_bird$species <- NA
dat_bird$BirdID  <- NA
for (i in 1:nrow(dat_bird)){
if (strsplit(dat_bird$bird_id, "_")[[i]][1] == "COLLI"){
dat_bird$species[i] = "col_liv"
dat_bird$BirdID[i]  = paste(strsplit(dat_bird$bird_id, "_")[[i]][2],strsplit(dat_bird$bird_id, "_")[[i]][3], sep = "_")
}else{
dat_bird$species[i] = paste(tolower(strsplit(dat_bird$bird_id, "_")[[i]][1]),strsplit(dat_bird$bird_id, "_")[[i]][2], sep = "_")
dat_bird$BirdID[i]  = paste(strsplit(dat_bird$bird_id, "_")[[i]][3],strsplit(dat_bird$bird_id, "_")[[i]][4], sep = "_")
}
}
dat_wingspec$species <- NA
dat_wingspec$BirdID  <- NA
for (i in 1:nrow(dat_wingspec)){
if (strsplit(dat_wingspec$bird_id, "_")[[i]][1] == "COLLI"){
dat_wingspec$species[i] = "col_liv"
dat_wingspec$BirdID[i]  = paste(strsplit(dat_wingspec$bird_id, "_")[[i]][2],strsplit(dat_wingspec$bird_id, "_")[[i]][3], sep = "_")
}else{
dat_wingspec$species[i] = paste(tolower(strsplit(dat_wingspec$bird_id, "_")[[i]][1]),strsplit(dat_wingspec$bird_id, "_")[[i]][2], sep = "_")
dat_wingspec$BirdID[i]  = paste(strsplit(dat_wingspec$bird_id, "_")[[i]][3],strsplit(dat_wingspec$bird_id, "_")[[i]][4], sep = "_")
}
}
# need the calamus angle to be positive (i.e. from start of vane to tip of calamus)
for (k in 1:nrow(dat_feat[which(dat_feat$Component == "calamus length"),c("Angle")])){
if (dat_feat[which(dat_feat$Component == "calamus length"),c("Angle")][k,1] < 0){
dat_feat[which(dat_feat$Component == "calamus length"),c("Angle")][k,1] = 180 + dat_feat[which(dat_feat$Component == "calamus length"),c("Angle")][k,1]
}
}
# need the vane angle to be negative (i.e. from start of vane to tip of feather)
for (k in 1:nrow(dat_feat[which(dat_feat$Component == "vane length"),c("Angle")])){
if (dat_feat[which(dat_feat$Component == "vane length"),c("Angle")][k,1] > 0){
dat_feat[which(dat_feat$Component == "vane length"),c("Angle")][k,1] = dat_feat[which(dat_feat$Component == "vane length"),c("Angle")][k,1] - 180
}
}
# define all assumed material properties
dat_mat = list()
dat_mat$material  =	c("Muscle", "Bone", "Skin", "Cortex", "Medullary")
dat_mat$density   = c(1100, 2060, 1060, 660, 37)
# CHECK THAT THIS IS THE CORRECT PROPORTION AND LIST ALL REFERENCES
# --------------------- Initialize variables -----------------------
all_data = as.data.frame(matrix(0, nrow = 0, ncol = 7)) # overall data
column_names = c("species","BirdID","TestID","FrameID","prop_type","component","value")
colnames(all_data) = column_names
# ----------- Iterate through each species ---------
specimens <- unique(dat_ind[,c("species","BirdID")])
View(specimens)
k = 24
# ----------- Filter the data to the current species ---------
species_curr  = specimens$species[k]
birdid_curr   = specimens$birdid[k]
birdid_curr   = specimens$birdid[k]
birdid_curr   = specimens$BirdID[k]
#Read in all the wing configuration data
filename_wingconfigs = list.files(pattern = paste(species_curr,birdid_curr,sep="_"))
dat_wing_curr   = read.csv(filename = filename_wingconfigs[1])
dat_wing_curr   = read.csv(filename_wingconfigs[1])
for (n in 2:length(filename_wingconfigs)){
dat_wing_curr = rbind(dat_wing,read.csv(filename = filename_wingconfigs[n]))
}
dat_wing_curr = rbind(dat_wing_curr,read.csv(filename = filename_wingconfigs[n]))
dat_wing_curr = rbind(dat_wing_curr,read.csv(filename_wingconfigs[n]))
View(dat_wing_curr)
plot(dat_wing_curr$elbow,dat_wing_curr$manus)
# Create the bone specific data frame
dat_bone = as.data.frame(matrix(nrow = 6, ncol = 5))
names(dat_bone) <- c("bone", "bone_mass", "bone_len", "bone_out_rad", "bone_in_rad")
dat_bone$bone <- c("Humerus","Ulna","Radius","Carpometacarpus","Ulnare", "Radiale")
dat_bone$bone_mass  <- c(dat_wingspec_curr$humerus_mass_g,dat_wingspec_curr$ulna_mass_g,dat_wingspec_curr$radius_mass_g,dat_wingspec_curr$cmc_mass_g,
dat_wingspec_curr$ulnare_mass_g,dat_wingspec_curr$radiale_mass_g)
dat_bird_curr = subset(dat_bird, species == species_curr & birdid == birdid_curr)
dat_bird_curr = subset(dat_bird, species == species_curr & BirdID == birdid_curr)
dat_wingspec_curr = subset(dat_wingspec, species == species_curr & BirdID == birdid_curr)
# Create the bone specific data frame
dat_bone = as.data.frame(matrix(nrow = 6, ncol = 5))
names(dat_bone) <- c("bone", "bone_mass", "bone_len", "bone_out_rad", "bone_in_rad")
dat_bone$bone <- c("Humerus","Ulna","Radius","Carpometacarpus","Ulnare", "Radiale")
dat_bone$bone_mass  <- c(dat_wingspec_curr$humerus_mass_g,dat_wingspec_curr$ulna_mass_g,dat_wingspec_curr$radius_mass_g,dat_wingspec_curr$cmc_mass_g,
dat_wingspec_curr$ulnare_mass_g,dat_wingspec_curr$radiale_mass_g)
dat_bone$bone_length  <- c(dat_wingspec_curr$humerus_length_mm,dat_wingspec_curr$ulna_length_mm,dat_wingspec_curr$radius_length_mm,dat_wingspec_curr$cmc_length_mm)
dat_bone$bone_out_rad <- c(dat_wingspec_curr$humerus_diameter_mm,dat_wingspec_curr$ulna_diameter_mm,dat_wingspec_curr$radius_diameter_mm,dat_wingspec_curr$cmc_diameter_mm)
dat_bone$bone_out_rad <- 0.5*dat_bone$bone_out_rad
dat_bone$bone_in_rad  <- 0.72*dat_bone$bone_out_rad # CHECK THAT THIS IS THE CORRECT PROPORTION AND LIST ALL REFERENCES
# Create the bone specific data frame
dat_bone = as.data.frame(matrix(nrow = 6, ncol = 5))
names(dat_bone) <- c("bone", "bone_mass", "bone_len", "bone_out_rad", "bone_in_rad")
dat_bone$bone <- c("Humerus","Ulna","Radius","Carpometacarpus","Ulnare", "Radiale")
dat_bone$bone_mass  <- c(dat_wingspec_curr$humerus_mass_g,dat_wingspec_curr$ulna_mass_g,dat_wingspec_curr$radius_mass_g,dat_wingspec_curr$cmc_mass_g,
dat_wingspec_curr$ulnare_mass_g,dat_wingspec_curr$radiale_mass_g)
dat_bone$bone_length  <- c(dat_wingspec_curr$humerus_length_mm,dat_wingspec_curr$ulna_length_mm,dat_wingspec_curr$radius_length_mm,dat_wingspec_curr$cmc_length_mm)
dat_bone$bone_length  <- c(dat_wingspec_curr$humerus_length_mm,dat_wingspec_curr$ulna_length_mm,dat_wingspec_curr$radius_length_mm,dat_wingspec_curr$cmc_length_mm,
NA,NA)
dat_bone$bone_out_rad <- c(dat_wingspec_curr$humerus_diameter_mm,dat_wingspec_curr$ulna_diameter_mm,dat_wingspec_curr$radius_diameter_mm,dat_wingspec_curr$cmc_diameter_mm,
NA,NA)
dat_wingspec_curr$ulna_diameter_mm
dat_bone$bone_out_rad <- c(dat_wingspec_curr$humerus_diameter_mm,dat_wingspec_curr$ulna_diameter,dat_wingspec_curr$radius_diameter_mm,dat_wingspec_curr$cmc_diameter_mm,
NA,NA)
dat_bone$bone_out_rad <- 0.5*dat_bone$bone_out_rad
dat_bone$bone_in_rad  <- 0.72*dat_bone$bone_out_rad # CHECK THAT THIS IS THE CORRECT PROPORTION AND LIST ALL REFERENCES
View(dat_bone)
dat_bone = as.data.frame(matrix(nrow = 6, ncol = 5))
names(dat_bone) <- c("bone", "bone_mass", "bone_len", "bone_out_rad", "bone_in_rad")
dat_bone$bone <- c("Humerus","Ulna","Radius","Carpometacarpus","Ulnare", "Radiale")
dat_bone$bone_mass  <- c(dat_wingspec_curr$humerus_mass_g,dat_wingspec_curr$ulna_mass_g,dat_wingspec_curr$radius_mass_g,dat_wingspec_curr$cmc_mass_g,
dat_wingspec_curr$ulnare_mass_g,dat_wingspec_curr$radiale_mass_g)/1000
dat_bone$bone_length  <- c(dat_wingspec_curr$humerus_length_mm,dat_wingspec_curr$ulna_length_mm,dat_wingspec_curr$radius_length_mm,dat_wingspec_curr$cmc_length_mm,
NA,NA)/1000
dat_bone$bone_out_rad <- c(dat_wingspec_curr$humerus_diameter_mm,dat_wingspec_curr$ulna_diameter,dat_wingspec_curr$radius_diameter_mm,dat_wingspec_curr$cmc_diameter_mm,
NA,NA)/1000
dat_bone$bone_out_rad <- 0.5*dat_bone$bone_out_rad
dat_bone$bone_in_rad  <- 0.72*dat_bone$bone_out_rad # CHECK THAT THIS IS THE CORRECT PROPORTION AND LIST ALL REFERENCES
View(dat_bone)
# Create the feather specific data frame
# Inputs are adjusted to be in SI units, kg and m
tmp = subset(dat_feat, species == species_curr & bird_id == birdid_curr)
tmp_area   <- spread(aggregate(x = dat_feat$Area, by = list(dat_feat$Feather, dat_feat$Component), "mean"),"Group.2","x")
tmp_area   <- tmp_area[,c("Group.1","distal vane","proximal vane")]
tmp_length <- spread(aggregate(x = dat_feat$Length, by = list(dat_feat$Feather, dat_feat$Component), "mean"),"Group.2","x")
tmp_length   <- tmp_length[,c("Group.1","calamus length","vane length","rachis width")]
tmp_angle  <- spread(aggregate(x = dat_feat$Angle, by = list(dat_feat$Feather, dat_feat$Component), "mean"),"Group.2","x")
tmp_angle   <- tmp_angle[,c("Group.1","calamus length","vane length")] ## NEED TO ADJUST THESE TO WORK
dat_feat_curr <- merge(tmp_area,tmp_length, by = "Group.1")
# computes the interior angle between the calamus and vane assuming that the calamus is a positive angle and the vane is negative
dat_feat_curr$angle <- tmp_angle$"calamus length" - tmp_angle$"vane length"
View(dat_feat_curr)
# computes the interior angle between the calamus and vane assuming that the calamus is a positive angle and the vane is negative
dat_feat_curr$angle <- (tmp_angle$"calamus length" - tmp_angle$"vane length") - 180
View(dat_feat_curr)
# computes the interior angle between the calamus and vane assuming that the calamus is a positive angle and the vane is negative
dat_feat_curr$angle <- (tmp_angle$"calamus length" - tmp_angle$"vane length")
View(dat_feat_curr)
View(dat_feat_curr)
View(tmp_angle)
View(dat_feat_curr)
View(tmp)
View(tmp_angle)
spread(aggregate(x = dat_feat$Angle, by = list(dat_feat$Feather, dat_feat$Component), "mean"),"Group.2","x")
tmp_angle  <- spread(aggregate(x = tmp$Angle, by = list(tmp$Feather, tmp$Component), "mean"),"Group.2","x")
spread(aggregate(x = tmp$Angle, by = list(tmp$Feather, tmp$Component), "mean"),"Group.2","x")
tmp = subset(dat_feat, species == species_curr & bird_id == birdid_curr)
tmp_area   <- spread(aggregate(x = tmp$Area, by = list(tmp$Feather, tmp$Component), "mean"),"Group.2","x")
tmp_area   <- tmp_area[,c("Group.1","distal vane","proximal vane")]
tmp_length <- spread(aggregate(x = tmp$Length, by = list(tmp$Feather, tmp$Component), "mean"),"Group.2","x")
tmp_length   <- tmp_length[,c("Group.1","calamus length","vane length","rachis width")]
tmp_angle  <- spread(aggregate(x = tmp$Angle, by = list(tmp$Feather, tmp$Component), "mean"),"Group.2","x")
tmp_angle   <- tmp_angle[,c("Group.1","calamus length","vane length")] ## NEED TO ADJUST THESE TO WORK
dat_feat_curr <- merge(tmp_area,tmp_length, by = "Group.1")
View(tmp_angle)
dat_feat_curr <- merge(tmp_area,tmp_length, by = "Group.1")
# computes the interior angle between the calamus and vane assuming that the calamus is a positive angle and the vane is negative
dat_feat_curr$angle <- (tmp_angle$"calamus length" - tmp_angle$"vane length") - 360
View(dat_feat_curr)
# computes the interior angle between the calamus and vane assuming that the calamus is a positive angle and the vane is negative
dat_feat_curr$angle <- 180 - (tmp_angle$"calamus length" - tmp_angle$"vane length")
View(dat_feat_curr)
dat_pt = dat_wing_curr[,4:36]
for (i in 1:length(colnames(dat_pt))){
# x position
if (grepl("X",colnames(dat_pt)[i],fixed=TRUE)){
dat_pt[,i] = dat_pt[,i] + dat_bird_curr$x_loc_of_humeral_insert_m
}
# y position - CAUTION THE WING IS ASSUMED TO BE THE RIGHT SIDE WING HENCE THE POSITIVE ADDITION
if (grepl("Y",colnames(dat_pt)[i],fixed=TRUE)){
dat_pt[,i] = dat_pt[,i] + dat_bird_curr$y_loc_of_humeral_insert_m
}
# z position
if (grepl("Z",colnames(dat_pt)[i],fixed=TRUE)){
dat_pt[,i] = dat_pt[,i] + dat_bird_curr$z_loc_of_humeral_insert_m
}
}
warnings()
dat_bird_curr$y_loc_of_humeral_insert_m
dat_bird_curr$x_loc_of_humeral_insert_cm
dat_bird_curr$y_loc_of_humeral_insert_cm
dat_bird_curr$z_loc_of_humeral_insert_cm
dat_pt = dat_wing_curr[,4:36]
# --------------- Clean up incoming data --------------------
# CAUTION:   The read in data has the origin at the RH humeral head. Pt1X, Pt1Y, Pt1Z = 0
#            It is critical that the data is given in the structural
#            frame of reference with the origin at the vehicle reference
#            point (VRP). VRP is assumed to be in the center of the body
#            on the y axis between the two humerus bones at the clavicle point
for (i in 1:length(colnames(dat_pt))){
# x position
if (grepl("X",colnames(dat_pt)[i],fixed=TRUE)){
dat_pt[,i] = dat_pt[,i] - (dat_bird_curr$x_loc_of_humeral_insert_cm*0.01)
}
# y position - CAUTION THE WING IS ASSUMED TO BE THE RIGHT SIDE WING HENCE THE POSITIVE ADDITION
if (grepl("Y",colnames(dat_pt)[i],fixed=TRUE)){
dat_pt[,i] = dat_pt[,i] + (dat_bird_curr$y_loc_of_humeral_insert_cm*0.01)
}
# z position
if (grepl("Z",colnames(dat_pt)[i],fixed=TRUE)){
dat_pt[,i] = dat_pt[,i] + (dat_bird_curr$z_loc_of_humeral_insert_cm*0.01)
}
}
View(dat_pt)
ind_wing = 1
# both dataframes below should only be one row of input points
dat_id_curr = dat_wing_curr[ind_wing,c("species","BirdID","TestID","FrameID")]
dat_wing_curr$wing_side <- str_sub(dat_wing_curr$birdid, -1)
dat_wing_curr$BirdID    <- str_sub(dat_wing_curr$birdid, 1, str_length(dat_wing_curr$birdid)-1)
# both dataframes below should only be one row of input points
dat_id_curr = dat_wing_curr[ind_wing,c("species","BirdID","TestID","FrameID")]
# both dataframes below should only be one row of input points
dat_id_curr = dat_wing_curr[ind_wing,c("species","BirdID","testid","frameID")]
dat_pt_curr = dat_pt[ind_wing,]
# Initialize common pts
Pt1  = c(dat_pt_curr$pt1_X, dat_pt_curr$pt1_Y, dat_pt_curr$pt1_Z) # Shoulder
Pt2  = c(dat_pt_curr$pt2_X, dat_pt_curr$pt2_Y, dat_pt_curr$pt2_Z) # Elbow
Pt3  = c(dat_pt_curr$pt3_X, dat_pt_curr$pt3_Y, dat_pt_curr$pt3_Z) # Wrist
Pt4  = c(dat_pt_curr$pt4_X, dat_pt_curr$pt4_Y, dat_pt_curr$pt4_Z) # End of carpometacarpus
Pt8  = c(dat_pt_curr$pt8_X, dat_pt_curr$pt8_Y, dat_pt_curr$pt8_Z)    # Tip of most distal primary
Pt9  = c(dat_pt_curr$pt9_X, dat_pt_curr$pt9_Y, dat_pt_curr$pt9_Z)    # Tip of last primary to model as if on the end of the carpometacarpus
Pt10 = c(dat_pt_curr$pt10_X, dat_pt_curr$pt10_Y, dat_pt_curr$pt10_Z) # S1
Pt11 = c(dat_pt_curr$pt11_X, dat_pt_curr$pt11_Y, dat_pt_curr$pt11_Z) # Wing root trailing edge
Pt12 = c(dat_pt_curr$pt12_X, dat_pt_curr$pt12_Y, dat_pt_curr$pt12_Z) # Wing root leading edge
clean_pts = rbind(Pt1,Pt2,Pt3,Pt4,Pt8,Pt9,Pt10,Pt11,Pt12)
# solve the data
curr_wing_data      = massprop_birdwing(dat_id_curr, dat_bird_curr, dat_bone_curr, dat_feat_curr, dat_mat, clean_pts)
devtools::load_all()
setwd("~/Documents/birdmoment")
devtools::load_all()
# solve the data
curr_wing_data      = massprop_birdwing(dat_id_curr, dat_bird_curr, dat_bone_curr, dat_feat_curr, dat_mat, clean_pts)
dat_bone_curr = as.data.frame(matrix(nrow = 6, ncol = 5))
names(dat_bone_curr) <- c("bone", "bone_mass", "bone_len", "bone_out_rad", "bone_in_rad")
dat_bone_curr$bone <- c("Humerus","Ulna","Radius","Carpometacarpus","Ulnare", "Radiale")
dat_bone_curr$bone_mass  <- c(dat_wingspec_curr$humerus_mass_g,dat_wingspec_curr$ulna_mass_g,dat_wingspec_curr$radius_mass_g,dat_wingspec_curr$cmc_mass_g,
dat_wingspec_curr$ulnare_mass_g,dat_wingspec_curr$radiale_mass_g)/1000
dat_bone_curr$bone_length  <- c(dat_wingspec_curr$humerus_length_mm,dat_wingspec_curr$ulna_length_mm,dat_wingspec_curr$radius_length_mm,dat_wingspec_curr$cmc_length_mm,
NA,NA)/1000
dat_bone_curr$bone_out_rad <- c(dat_wingspec_curr$humerus_diameter_mm,dat_wingspec_curr$ulna_diameter,dat_wingspec_curr$radius_diameter_mm,dat_wingspec_curr$cmc_diameter_mm,
NA,NA)/1000
dat_bone_curr$bone_out_rad <- 0.5*dat_bone_curr$bone_out_rad
dat_bone_curr$bone_in_rad  <- 0.72*dat_bone_curr$bone_out_rad # CHECK THAT THIS IS THE CORRECT PROPORTION AND LIST ALL REFERENCES
# solve the data
curr_wing_data      = massprop_birdwing(dat_id_curr, dat_bird_curr, dat_bone_curr, dat_feat_curr, dat_mat, clean_pts)
dat_bird <- merge(dat_bird,dat_wingspec, by = c("species","BirdID"))
dat_bird_curr = subset(dat_bird, species == species_curr & BirdID == birdid_curr)
# Correct all the units in the data frame to SI
for (i in 1:length(colnames(dat_bird))){
# x position
if (grepl("mass_g",colnames(dat_bird)[i],fixed=TRUE)){
dat_bird[,i] = dat_bird[,i]/1000
}
}
# identification info on each of the individual specimens
dat_ind      = read.csv(file = "2020_12_15_IDfile.csv")
# all of the non-wing based measurements for all specimens
dat_bird     = readxl::read_xlsx("2020_12_19_bird_measurements.xlsx", sheet = 'Major body parts')
# all of the wing based measurements for all specimens
dat_wingspec = readxl::read_xlsx("2020_12_19_bird_measurements.xlsx", sheet = 'Within wings')
# all of the feather measurements for one specimen of each species
dat_feat     = readxl::read_xlsx("2020_12_19_trackingsheet.xlsx", sheet = 'FeatherData')
# ----------------- Clean Data -----------------------
dat_ind$wing_side <- str_sub(dat_ind$birdid, -1)
dat_ind$BirdID    <- str_sub(dat_ind$birdid, 1, str_length(dat_ind$birdid)-1)
dat_bird$species <- NA
dat_bird$BirdID  <- NA
for (i in 1:nrow(dat_bird)){
if (strsplit(dat_bird$bird_id, "_")[[i]][1] == "COLLI"){
dat_bird$species[i] = "col_liv"
dat_bird$BirdID[i]  = paste(strsplit(dat_bird$bird_id, "_")[[i]][2],strsplit(dat_bird$bird_id, "_")[[i]][3], sep = "_")
}else{
dat_bird$species[i] = paste(tolower(strsplit(dat_bird$bird_id, "_")[[i]][1]),strsplit(dat_bird$bird_id, "_")[[i]][2], sep = "_")
dat_bird$BirdID[i]  = paste(strsplit(dat_bird$bird_id, "_")[[i]][3],strsplit(dat_bird$bird_id, "_")[[i]][4], sep = "_")
}
}
dat_wingspec$species <- NA
dat_wingspec$BirdID  <- NA
for (i in 1:nrow(dat_wingspec)){
if (strsplit(dat_wingspec$bird_id, "_")[[i]][1] == "COLLI"){
dat_wingspec$species[i] = "col_liv"
dat_wingspec$BirdID[i]  = paste(strsplit(dat_wingspec$bird_id, "_")[[i]][2],strsplit(dat_wingspec$bird_id, "_")[[i]][3], sep = "_")
}else{
dat_wingspec$species[i] = paste(tolower(strsplit(dat_wingspec$bird_id, "_")[[i]][1]),strsplit(dat_wingspec$bird_id, "_")[[i]][2], sep = "_")
dat_wingspec$BirdID[i]  = paste(strsplit(dat_wingspec$bird_id, "_")[[i]][3],strsplit(dat_wingspec$bird_id, "_")[[i]][4], sep = "_")
}
}
# Merge the wing specific data with the full bird data
dat_bird <- merge(dat_bird,dat_wingspec, by = c("species","BirdID"))
# Correct all the units in the data frame to SI
for (i in 1:length(colnames(dat_bird))){
# Adjust all masses to be in kg
if (grepl("mass_g",colnames(dat_bird)[i],fixed=TRUE)){
dat_bird[,i] = dat_bird[,i]/1000
}
# Adjust all lengths to be in m
if (grepl("_cm",colnames(dat_bird)[i],fixed=TRUE)){
dat_bird[,i] = dat_bird[,i]/100
}
# Adjust all lengths to be in m
if (grepl("_mm",colnames(dat_bird)[i],fixed=TRUE)){
dat_bird[,i] = dat_bird[,i]/1000
}
}
# identification info on each of the individual specimens
dat_ind      = read.csv(file = "2020_12_15_IDfile.csv")
# all of the non-wing based measurements for all specimens
dat_bird     = readxl::read_xlsx("2020_12_19_bird_measurements.xlsx", sheet = 'Major body parts')
# all of the wing based measurements for all specimens
dat_wingspec = readxl::read_xlsx("2020_12_19_bird_measurements.xlsx", sheet = 'Within wings')
# ------------------------- Set file directory -------------------------
setwd("/Users/christinaharvey/Dropbox (University of Michigan)/Bird Mass Distribution/rundata")
# identification info on each of the individual specimens
dat_ind      = read.csv(file = "2020_12_15_IDfile.csv")
# all of the non-wing based measurements for all specimens
dat_bird     = readxl::read_xlsx("2020_12_19_bird_measurements.xlsx", sheet = 'Major body parts')
# all of the wing based measurements for all specimens
dat_wingspec = readxl::read_xlsx("2020_12_19_bird_measurements.xlsx", sheet = 'Within wings')
# all of the feather measurements for one specimen of each species
dat_feat     = readxl::read_xlsx("2020_12_19_trackingsheet.xlsx", sheet = 'FeatherData')
# ----------------- Clean Data -----------------------
dat_ind$wing_side <- str_sub(dat_ind$birdid, -1)
dat_ind$BirdID    <- str_sub(dat_ind$birdid, 1, str_length(dat_ind$birdid)-1)
dat_bird$species <- NA
dat_bird$BirdID  <- NA
for (i in 1:nrow(dat_bird)){
if (strsplit(dat_bird$bird_id, "_")[[i]][1] == "COLLI"){
dat_bird$species[i] = "col_liv"
dat_bird$BirdID[i]  = paste(strsplit(dat_bird$bird_id, "_")[[i]][2],strsplit(dat_bird$bird_id, "_")[[i]][3], sep = "_")
}else{
dat_bird$species[i] = paste(tolower(strsplit(dat_bird$bird_id, "_")[[i]][1]),strsplit(dat_bird$bird_id, "_")[[i]][2], sep = "_")
dat_bird$BirdID[i]  = paste(strsplit(dat_bird$bird_id, "_")[[i]][3],strsplit(dat_bird$bird_id, "_")[[i]][4], sep = "_")
}
}
dat_wingspec$species <- NA
dat_wingspec$BirdID  <- NA
for (i in 1:nrow(dat_wingspec)){
if (strsplit(dat_wingspec$bird_id, "_")[[i]][1] == "COLLI"){
dat_wingspec$species[i] = "col_liv"
dat_wingspec$BirdID[i]  = paste(strsplit(dat_wingspec$bird_id, "_")[[i]][2],strsplit(dat_wingspec$bird_id, "_")[[i]][3], sep = "_")
}else{
dat_wingspec$species[i] = paste(tolower(strsplit(dat_wingspec$bird_id, "_")[[i]][1]),strsplit(dat_wingspec$bird_id, "_")[[i]][2], sep = "_")
dat_wingspec$BirdID[i]  = paste(strsplit(dat_wingspec$bird_id, "_")[[i]][3],strsplit(dat_wingspec$bird_id, "_")[[i]][4], sep = "_")
}
}
# Merge the wing specific data with the full bird data
dat_bird <- merge(dat_bird,dat_wingspec, by = c("species","BirdID"))
# Correct all the units in the data frame to SI
for (i in 1:length(colnames(dat_bird))){
# Adjust all masses to be in kg
if (grepl("mass_g",colnames(dat_bird)[i],fixed=TRUE)){
dat_bird[,i] = dat_bird[,i]/1000
}
# Adjust all lengths to be in m
if (grepl("_cm",colnames(dat_bird)[i],fixed=TRUE)){
dat_bird[,i] = dat_bird[,i]/100
}
# Adjust all lengths to be in m
if (grepl("_mm",colnames(dat_bird)[i],fixed=TRUE)){
dat_bird[,i] = dat_bird[,i]/1000
}
}
names(dat_bird)[names(dat_bird) == "humerus_muscles_mass_g"] <- "brachial_muscle_mass"
names(dat_bird)[names(dat_bird) == "raduln_muscles_mass_g"]  <- "antebrachial_muscle_mass"
names(dat_bird)[names(dat_bird) == "cmc_muscles_mass_g"]     <- "manus_muscle_mass"
dat_bird_curr = subset(dat_bird, species == species_curr & BirdID == birdid_curr)
# solve the data
curr_wing_data      = massprop_birdwing(dat_id_curr, dat_bird_curr, dat_bone_curr, dat_feat_curr, dat_mat, clean_pts)
dat_wingID_curr = dat_id_curr
# --------------------- Initialize variables -----------------------
mass_properties = as.data.frame(matrix(0, nrow = 0, ncol = 7)) # overall data
column_names = c("species","BirdID","TestID","FrameID","prop_type","component","value")
colnames(mass_properties) = column_names
mass_properties_bone      = mass_properties                    # specific bone data
mass_properties_muscle    = mass_properties                    # specific muscle data
mass_properties_skin      = mass_properties                    # specific skin data
mass_properties_feathers  = mass_properties                    # individual feather mass property data
# define incoming points
Pt1 = clean_pts[1,] # shoulder
Pt2 = clean_pts[2,] # elbow
Pt3 = clean_pts[3,] # wrist
Pt4 = clean_pts[4,] # end of carpometacarpus
Pt8  = clean_pts[5,] # tip of most distal primary
Pt9  = clean_pts[6,] # tip of last primary to model as if on the end of the carpometacarpus
Pt10 = clean_pts[7,] # tip of S1
Pt11 = clean_pts[8,] # tip of last secondary feather at wing root
Pt12 = clean_pts[9,] # leading edge where wing was removed from the body on the wing root
rho_bone     = dat_mat$density[which(dat_mat$material == "Bone")]
dat_bone_hum = subset(dat_bone_curr, bone == "Humerus")
dat_bone_uln = subset(dat_bone_curr, bone == "Ulna")
dat_bone_rad = subset(dat_bone_curr, bone == "Radius")
dat_bone_car = subset(dat_bone_curr, bone == "Carpometacarpus")
hum       = massprop_bones(dat_bone_hum$bone_mass,dat_bone_hum$bone_len,dat_bone_hum$bone_out_rad,dat_bone_hum$bone_in_rad,rho_bone, Pt1, Pt2)
ulna      = massprop_bones(dat_bone_uln$bone_mass,dat_bone_uln$bone_len,dat_bone_uln$bone_out_rad,dat_bone_uln$bone_in_rad,rho_bone, Pt2, Pt3)
radius    = massprop_bones(dat_bone_rad$bone_mass,dat_bone_rad$bone_len,dat_bone_rad$bone_out_rad,dat_bone_rad$bone_in_rad,rho_bone, Pt2, Pt3)
car       = massprop_bones(dat_bone_car$bone_mass,dat_bone_car$bone_len,dat_bone_car$bone_out_rad,dat_bone_car$bone_in_rad,rho_bone, Pt3, Pt4)
wristbone = massprop_pm((subset(dat_bone_curr, bone == "Ulnare")$bone_mass + subset(dat_bone_curr, bone == "Radiale")$bone_mass), Pt3)
# --- All Bones ---
prop_bone = list()
# simply addition as long as about the same origin in the same frame of reference (Frame of reference: VRP | Origin: VRP)
prop_bone$I  = hum$I + ulna$I + radius$I + car$I + wristbone$I
# weighted average of the individual center of mass (Frame of reference: VRP | Origin: VRP)
prop_bone$CG = (dat_bone_hum$bone_mass*hum$CG + dat_bone_uln$bone_mass*ulna$CG + dat_bone_rad$bone_mass*radius$CG + dat_bone_car$bone_mass*car$CG + (subset(dat_bone_curr, bone == "Ulnare")$bone_mass + subset(dat_bone_curr, bone == "Radiale")$bone_mass)*wristbone$CG)/sum(dat_bone_curr$bone_mass)
prop_bone$m  = sum(dat_bone_curr$bone_mass)
prop_bone$I
hum
dat_bone_hum$bone_mass
dat_bone_hum$bone_len
dat_bone_hum$bone_out_rad
dat_bone_hum$bone_in_rad
rho_bone
Pt1
Pt2
dat_bone_curr = as.data.frame(matrix(nrow = 6, ncol = 5))
names(dat_bone_curr) <- c("bone", "bone_mass", "bone_len", "bone_out_rad", "bone_in_rad")
dat_bone_curr$bone <- c("Humerus","Ulna","Radius","Carpometacarpus","Ulnare", "Radiale")
dat_bone_curr$bone_mass  <- c(dat_bird_curr$humerus_mass_g,dat_bird_curr$ulna_mass_g,dat_bird_curr$radius_mass_g,dat_bird_curr$cmc_mass_g,
dat_bird_curr$ulnare_mass_g,dat_bird_curr$radiale_mass_g)
dat_bone_curr$bone_len  <- c(dat_bird_curr$humerus_length_mm,dat_bird_curr$ulna_length_mm,dat_bird_curr$radius_length_mm,dat_bird_curr$cmc_length_mm,
NA,NA)
dat_bone_curr$bone_out_rad <- c(dat_bird_curr$humerus_diameter_mm, ## ASK ABOUT THIS
dat_bird_curr$ulna_diameter_mm,
dat_bird_curr$radius_diameter_mm,
dat_bird_curr$cmc_diameter_mm,
NA,NA)
dat_bone_curr$bone_out_rad <- 0.5*dat_bone_curr$bone_out_rad
dat_bone_curr$bone_in_rad  <- 0.72*dat_bone_curr$bone_out_rad # CHECK THAT THIS IS THE CORRECT PROPORTION AND LIST ALL REFERENCES
dat_bone_curr$bone_len  <- c(dat_bird_curr$humerus_length_mm,dat_bird_curr$ulna_length_mm,dat_bird_curr$radius_length_mm,dat_bird_curr$cmc_length_mm,
NA,NA)
dat_bone_curr$bone_out_rad <- c(dat_bird_curr$humerus_diameter_mm, ## ASK ABOUT THIS
dat_bird_curr$ulna_diameter_mm,
dat_bird_curr$radius_diameter_mm,
dat_bird_curr$cmc_diameter_mm,
NA,NA)
dat_bone_curr$bone_out_rad <- c(dat_bird_curr$humerus_diameter_mm, ## ASK ABOUT THIS
dat_bird_curr$ulna_diameter_mm,
dat_bird_curr$radius_diameter_mm,
dat_bird_curr$cmc_diameter_mm,NA,NA)
dat_bone_curr$bone_out_rad
c(dat_bird_curr$humerus_diameter_mm, ## ASK ABOUT THIS
dat_bird_curr$ulna_diameter_mm,
dat_bird_curr$radius_diameter_mm,
dat_bird_curr$cmc_diameter_mm,NA,NA)
dat_bird_curr$humerus_diameter_mm,
dat_bird_curr$humerus_diameter_mm
dat_bird_curr$ulna_diameter_mm
names(dat_feat_curr)[names(dat_feat_curr) == "Group.1"]         <- "feather"
i = 1
paste(tolower(dat_feat_curr$feather[i]),"mass_g",sep = "_")
dat_bird_curr[1,paste(tolower(dat_feat_curr$feather[i]),"mass_g",sep = "_")]
dat_feat_curr$m_f <- NA
for (i in 1:nrow(dat_feat_curr)){
dat_feat_curr$m_f[i] = dat_bird_curr[1,paste(tolower(dat_feat_curr$feather[i]),"mass_g",sep = "_")]
}
View(dat_feat_curr)
devtools::load_all()
# ------------------------- Set file directory -------------------------
setwd("/Users/christinaharvey/Dropbox (University of Michigan)/Bird Mass Distribution/rundata")
# identification info on each of the individual specimens
dat_ind      = read.csv(file = "2020_12_15_IDfile.csv")
# all of the non-wing based measurements for all specimens - NEED TO RESAVE THIS - ALSO NEED TO CORRECT ONE ID NUMBER TO MATCH FEATHERS
dat_bird     = readxl::read_xlsx("2020_12_19_bird_measurements.xlsx", sheet = 'Major body parts')
# all of the wing based measurements for all specimens
dat_wingspec = readxl::read_xlsx("2020_12_19_bird_measurements.xlsx", sheet = 'Within wings')
# all of the feather measurements for one specimen of each species
dat_feat     = readxl::read_xlsx("2021_01_13_trackingsheet.xlsx", sheet = 'FeatherData')
# all of the barb measurements for each species baed on measurements from previous studies
dat_barb     = readxl::read_xlsx("2021_01_13_trackingsheet.xlsx", sheet = 'BarbInfo')
# ----------------- Clean Data -----------------------
# Save info about whether this is a right or left wing
dat_ind$wing_side <- str_sub(dat_ind$birdid, -1)
usethis::use_package("stringr", type = "Imports", min_version = NULL)
setwd("/Users/christinaharvey/Documents/birdmoment")
setwd("/Users/christinaharvey/Documents/birdmoment")
usethis::use_package("stringr", type = "Imports", min_version = NULL)
