# add data to bone specific data frame
mass_properties_bone = store_data(dat_wingID_curr,hum,mass_properties_bone,"humerus")
mass_properties_bone = store_data(dat_wingID_curr,ulna,mass_properties_bone,"ulna")
mass_properties_bone = store_data(dat_wingID_curr,radius,mass_properties_bone,"radius")
mass_properties_bone = store_data(dat_wingID_curr,car,mass_properties_bone,"carpo")
mass_properties_bone = store_data(dat_wingID_curr,wristbone,mass_properties_bone,"wristbones")
# add data to muscle specific data frame
mass_properties_muscle = store_data(dat_wingID_curr,brach,mass_properties_muscle,"brach")
mass_properties_muscle = store_data(dat_wingID_curr,abrach,mass_properties_muscle,"abrach")
mass_properties_muscle = store_data(dat_wingID_curr,manus,mass_properties_muscle,"manus")
# add data to bone specific data frame
# --- Primaries ---
for (i in 1:no_pri){
feather_name = paste("P",i,sep = "")
mass_properties_feathers = store_data(dat_wingID_curr,res_pri$CG[i,],mass_properties_feathers,feather_name)
}
# --- Primaries ---
for (i in 1:no_sec){
feather_name = paste("S",i,sep = "")
mass_properties_feathers = store_data(dat_wingID_curr,res_sec$CG[i,],mass_properties_feathers,feather_name)
}
# save all combined data groups to the master list
mass_properties      = store_data(dat_wingID_curr,prop_bone,mass_properties,"bones")
mass_properties      = store_data(dat_wingID_curr,prop_muscles,mass_properties,"muscles")
mass_properties      = store_data(dat_wingID_curr,prop_skin,mass_properties,"skin")
mass_properties      = store_data(dat_wingID_curr,prop_feathers,mass_properties,"feathers")
# save all wing data
prop_bird    = list()
prop_bird$I  = prop_bone$I + prop_muscles$I + prop_skin$I + prop_feathers$I
prop_bird$m  = prop_bone$m + prop_muscles$m + prop_skin$m + prop_feathers$m
prop_bird$CG = (prop_bone$CG*prop_bone$m + prop_muscles$CG*prop_muscles$m + prop_skin$CG*prop_skin$m + prop_feathers$CG*prop_feathers$m)/prop_bird$m
mass_properties  = store_data(dat_wingID_curr,prop_bird,mass_properties,"wing")
# save the final mass used for the analysis
new_row = data.frame(species = dat_wingID_curr$species, WingID = as.character(dat_wingID_curr$WingID),
TestID = as.character(dat_wingID_curr$TestID), FrameID = as.character(dat_wingID_curr$frameID),
component = "wing", object = "m", value = prop_bird$m) # saves the name and valueof the tensor component
mass_properties = rbind(mass_properties,new_row)
curr_res_pri = list()
curr_res_pri$I = res_pri$I[,,i]
curr_res_pri$I = res_pri$CG[i,]
curr_res_pri$I = res_pri$I[,,i]
curr_res_pri$CG = res_pri$CG[i,]
# add data to bone specific data frame
# --- Primaries ---
for (i in 1:no_pri){
feather_name = paste("P",i,sep = "")
curr_res_pri = list()
curr_res_pri$I  = res_pri$I[,,i]
curr_res_pri$CG = res_pri$CG[i,]
mass_properties_feathers = store_data(dat_wingID_curr,curr_res_pri,mass_properties_feathers,feather_name)
}
# --- Primaries ---
for (i in 1:no_sec){
feather_name = paste("S",i,sep = "")
curr_res_sec = list()
curr_res_sec$I  = res_sec$I[,,i]
curr_res_sec$CG = res_sec$CG[i,]
mass_properties_feathers = store_data(dat_wingID_curr,curr_res_sec,mass_properties_feathers,feather_name)
}
# save all combined data groups to the master list
mass_properties      = store_data(dat_wingID_curr,prop_bone,mass_properties,"bones")
mass_properties      = store_data(dat_wingID_curr,prop_muscles,mass_properties,"muscles")
mass_properties      = store_data(dat_wingID_curr,prop_skin,mass_properties,"skin")
mass_properties      = store_data(dat_wingID_curr,prop_feathers,mass_properties,"feathers")
# save all wing data
prop_bird    = list()
prop_bird$I  = prop_bone$I + prop_muscles$I + prop_skin$I + prop_feathers$I
prop_bird$m  = prop_bone$m + prop_muscles$m + prop_skin$m + prop_feathers$m
prop_bird$CG = (prop_bone$CG*prop_bone$m + prop_muscles$CG*prop_muscles$m + prop_skin$CG*prop_skin$m + prop_feathers$CG*prop_feathers$m)/prop_bird$m
mass_properties  = store_data(dat_wingID_curr,prop_bird,mass_properties,"wing")
# save the final mass used for the analysis
new_row = data.frame(species = dat_wingID_curr$species, WingID = as.character(dat_wingID_curr$WingID),
TestID = as.character(dat_wingID_curr$TestID), FrameID = as.character(dat_wingID_curr$frameID),
component = "wing", object = "m", value = prop_bird$m) # saves the name and valueof the tensor component
mass_properties = rbind(mass_properties,new_row)
mass_properties_skin      = mass_properties                    # specific skin data
mass_properties = as.data.frame(matrix(0, nrow = 0, ncol = 7)) # overall data
column_names = c("species","WingID","TestID","FrameID","prop_type","component","value")
colnames(mass_properties) = column_names
mass_properties_bone      = mass_properties                    # specific bone data
mass_properties_muscle    = mass_properties                    # specific muscle data
mass_properties_skin      = mass_properties                    # specific skin data
mass_properties_feathers  = mass_properties                    # individual feather mass property data
# add data to bone specific data frame
mass_properties_bone = store_data(dat_wingID_curr,hum,mass_properties_bone,"humerus")
mass_properties_bone = store_data(dat_wingID_curr,ulna,mass_properties_bone,"ulna")
mass_properties_bone = store_data(dat_wingID_curr,radius,mass_properties_bone,"radius")
mass_properties_bone = store_data(dat_wingID_curr,car,mass_properties_bone,"carpo")
mass_properties_bone = store_data(dat_wingID_curr,wristbone,mass_properties_bone,"wristbones")
# add data to muscle specific data frame
mass_properties_muscle = store_data(dat_wingID_curr,brach,mass_properties_muscle,"brach")
mass_properties_muscle = store_data(dat_wingID_curr,abrach,mass_properties_muscle,"abrach")
mass_properties_muscle = store_data(dat_wingID_curr,manus,mass_properties_muscle,"manus")
# add data to muscle specific data frame
mass_properties_skin = store_data(dat_wingID_curr,skin_prop,mass_properties_skin,"skin_prop")
mass_properties_skin = store_data(dat_wingID_curr,skin_man,mass_properties_skin,"skin_man")
# add data to bone specific data frame
# --- Primaries ---
for (i in 1:no_pri){
feather_name = paste("P",i,sep = "")
curr_res_pri = list()
curr_res_pri$I  = res_pri$I[,,i]
curr_res_pri$CG = res_pri$CG[i,]
mass_properties_feathers = store_data(dat_wingID_curr,curr_res_pri,mass_properties_feathers,feather_name)
}
# --- Primaries ---
for (i in 1:no_sec){
feather_name = paste("S",i,sep = "")
curr_res_sec = list()
curr_res_sec$I  = res_sec$I[,,i]
curr_res_sec$CG = res_sec$CG[i,]
mass_properties_feathers = store_data(dat_wingID_curr,curr_res_sec,mass_properties_feathers,feather_name)
}
# save all combined data groups to the master list
mass_properties      = store_data(dat_wingID_curr,prop_bone,mass_properties,"bones")
mass_properties      = store_data(dat_wingID_curr,prop_muscles,mass_properties,"muscles")
mass_properties      = store_data(dat_wingID_curr,prop_skin,mass_properties,"skin")
mass_properties      = store_data(dat_wingID_curr,prop_feathers,mass_properties,"feathers")
# save all wing data
prop_bird    = list()
prop_bird$I  = prop_bone$I + prop_muscles$I + prop_skin$I + prop_feathers$I
prop_bird$m  = prop_bone$m + prop_muscles$m + prop_skin$m + prop_feathers$m
prop_bird$CG = (prop_bone$CG*prop_bone$m + prop_muscles$CG*prop_muscles$m + prop_skin$CG*prop_skin$m + prop_feathers$CG*prop_feathers$m)/prop_bird$m
mass_properties  = store_data(dat_wingID_curr,prop_bird,mass_properties,"wing")
# save the final mass used for the analysis
new_row = data.frame(species = dat_wingID_curr$species, WingID = as.character(dat_wingID_curr$WingID),
TestID = as.character(dat_wingID_curr$TestID), FrameID = as.character(dat_wingID_curr$frameID),
component = "wing", object = "m", value = prop_bird$m) # saves the name and valueof the tensor component
mass_properties = rbind(mass_properties,new_row)
CGplot <- ggplot() +
#add in data
geom_point(aes(x=subset(mass_properties_skin, object == "CGy"), y=subset(mass_properties_skin, object == "CGX")), col = "gray") +
geom_point(aes(x=subset(mass_properties_bones, object == "CGy"), y=subset(mass_properties_bones, object == "CGX")), col = "yellow") +
geom_point(aes(x=subset(mass_properties_feathers, object == "CGy"), y=subset(mass_properties_feathers, object == "CGX")), col = "blue") +
geom_point(aes(x=subset(mass_properties_muscles, object == "CGy"), y=subset(mass_properties_muscles, object == "CGX")), col = "red") +
geom_point(aes(x=subset(mass_properties, object == "CGy"), y=subset(mass_properties, object == "CGX")), col = "green") +
geom_point(aes(x=clean_pts[,2], y=clean_pts[,1]), col = "black") +
#theme
#th +
#axis control
#scale_x_continuous(name = label_elb,limits = c(30,170), breaks = c(30,50,70,90,110,130,150,170)) +
#scale_y_continuous(name = label_man, limits = c(100,180), breaks = c(100,120,140,160,180)) +
#geom_rangeframe() +
#annotate(geom = "segment", x = 0, xend = 0, y = 100, yend = 180) +
#annotate(geom = "segment", x = 30, xend = 170, y = 0, yend = 0)
return(CGplot)
usethis::use_package("ggplot", type = "Imports", min_version = NULL)
usethis::use_package("ggplot2", type = "Imports", min_version = NULL)
CGplot <- ggplot() +
#add in data
geom_point(aes(x=subset(mass_properties_skin, object == "CGy"), y=subset(mass_properties_skin, object == "CGX")), col = "gray") +
geom_point(aes(x=subset(mass_properties_bones, object == "CGy"), y=subset(mass_properties_bones, object == "CGX")), col = "yellow") +
geom_point(aes(x=subset(mass_properties_feathers, object == "CGy"), y=subset(mass_properties_feathers, object == "CGX")), col = "blue") +
geom_point(aes(x=subset(mass_properties_muscles, object == "CGy"), y=subset(mass_properties_muscles, object == "CGX")), col = "red") +
geom_point(aes(x=subset(mass_properties, object == "CGy"), y=subset(mass_properties, object == "CGX")), col = "green") +
geom_point(aes(x=clean_pts[,2], y=clean_pts[,1]), col = "black")
library(ggplot2)
CGplot <- ggplot() +
#add in data
geom_point(aes(x=subset(mass_properties_skin, object == "CGy"), y=subset(mass_properties_skin, object == "CGX")), col = "gray") +
geom_point(aes(x=subset(mass_properties_bones, object == "CGy"), y=subset(mass_properties_bones, object == "CGX")), col = "yellow") +
geom_point(aes(x=subset(mass_properties_feathers, object == "CGy"), y=subset(mass_properties_feathers, object == "CGX")), col = "blue") +
geom_point(aes(x=subset(mass_properties_muscles, object == "CGy"), y=subset(mass_properties_muscles, object == "CGX")), col = "red") +
geom_point(aes(x=subset(mass_properties, object == "CGy"), y=subset(mass_properties, object == "CGX")), col = "green") +
geom_point(aes(x=clean_pts[,2], y=clean_pts[,1]), col = "black")
CGplot
subset(mass_properties_skin, object == "CGy")
CGplot <- ggplot() +
#add in data
geom_point(aes(x=subset(mass_properties_skin, object == "CGy")$value, y=subset(mass_properties_skin, object == "CGX")$value), col = "gray") +
geom_point(aes(x=subset(mass_properties_bones, object == "CGy")$value, y=subset(mass_properties_bones, object == "CGX")$value), col = "yellow") +
geom_point(aes(x=subset(mass_properties_feathers, object == "CGy")$value, y=subset(mass_properties_feathers, object == "CGX")$value), col = "blue") +
geom_point(aes(x=subset(mass_properties_muscles, object == "CGy")$value, y=subset(mass_properties_muscles, object == "CGX")$value), col = "red") +
geom_point(aes(x=subset(mass_properties, object == "CGy")$value, y=subset(mass_properties, object == "CGX")$value), col = "green") +
geom_point(aes(x=clean_pts[,2], y=clean_pts[,1]), col = "black")
CGplot
CGplot <- ggplot() +
#add in data
geom_point(aes(x=subset(mass_properties_skin, object == "CGy")$value, y=subset(mass_properties_skin, object == "CGX")$value), col = "gray")
CGplot
subset(mass_properties_skin, object == "CGX")$value)
subset(mass_properties_skin, object == "CGX")$value
View(mass_properties_skin)
CGplot <- ggplot() +
#add in data
geom_point(aes(x=subset(mass_properties_skin, object == "CGy")$value, y=subset(mass_properties_skin, object == "CGx")$value), col = "gray") +
geom_point(aes(x=subset(mass_properties_bones, object == "CGy")$value, y=subset(mass_properties_bones, object == "CGx")$value), col = "yellow") +
geom_point(aes(x=subset(mass_properties_feathers, object == "CGy")$value, y=subset(mass_properties_feathers, object == "CGx")$value), col = "blue") +
geom_point(aes(x=subset(mass_properties_muscles, object == "CGy")$value, y=subset(mass_properties_muscles, object == "CGx")$value), col = "red") +
geom_point(aes(x=subset(mass_properties, object == "CGy")$value, y=subset(mass_properties, object == "CGx")$value), col = "green") +
geom_point(aes(x=clean_pts[,2], y=clean_pts[,1]), col = "black")
CGplot
CGplot <- ggplot() +
#add in data
geom_point(aes(x=subset(mass_properties_skin, object == "CGy")$value, y=subset(mass_properties_skin, object == "CGx")$value), col = "gray") +
geom_point(aes(x=subset(mass_properties_bone, object == "CGy")$value, y=subset(mass_properties_bone, object == "CGx")$value), col = "yellow") +
geom_point(aes(x=subset(mass_properties_feathers, object == "CGy")$value, y=subset(mass_properties_feathers, object == "CGx")$value), col = "blue") +
geom_point(aes(x=subset(mass_properties_muscles, object == "CGy")$value, y=subset(mass_properties_muscles, object == "CGx")$value), col = "red") +
geom_point(aes(x=subset(mass_properties, object == "CGy")$value, y=subset(mass_properties, object == "CGx")$value), col = "green") +
geom_point(aes(x=clean_pts[,2], y=clean_pts[,1]), col = "black")
CGplot
CGplot <- ggplot() +
#add in data
geom_point(aes(x=subset(mass_properties_skin, object == "CGy")$value, y=subset(mass_properties_skin, object == "CGx")$value), col = "gray") +
geom_point(aes(x=subset(mass_properties_bone, object == "CGy")$value, y=subset(mass_properties_bone, object == "CGx")$value), col = "yellow") +
geom_point(aes(x=subset(mass_properties_feathers, object == "CGy")$value, y=subset(mass_properties_feathers, object == "CGx")$value), col = "blue") +
geom_point(aes(x=subset(mass_properties_muscle, object == "CGy")$value, y=subset(mass_properties_muscle, object == "CGx")$value), col = "red") +
geom_point(aes(x=subset(mass_properties, object == "CGy")$value, y=subset(mass_properties, object == "CGx")$value), col = "green") +
geom_point(aes(x=clean_pts[,2], y=clean_pts[,1]), col = "black")
CGplot
feather_info$loc_start
Pt2
Pt3
feather_info$loc_end
# --------------------- Initialize variables -----------------------
mass_properties = as.data.frame(matrix(0, nrow = 0, ncol = 7)) # overall data
column_names = c("species","WingID","TestID","FrameID","prop_type","component","value")
colnames(mass_properties) = column_names
mass_properties_bone      = mass_properties                    # specific bone data
mass_properties_muscle    = mass_properties                    # specific muscle data
mass_properties_skin      = mass_properties                    # specific skin data
mass_properties_feathers  = mass_properties                    # individual feather mass property data
# define incoming points
Pt1 = clean_pts[1,] # shoulder
Pt2 = clean_pts[2,] # elbow
Pt3 = clean_pts[3,] # wrist
Pt4 = clean_pts[4,] # end of carpometacarpus
Pt8  = clean_pts[5,] # tip of most distal primary
Pt9  = clean_pts[6,] # tip of last primary to model as if on the end of the carpometacarpus
Pt10 = clean_pts[7,] # tip of S1
Pt11 = clean_pts[8,] # tip of last secondary feather at wing root
# --------------------------------------------------
# --------------- Bone Data ------------------------
# --------------------------------------------------
rho_bone     = dat_mat$density[which(dat_mat$material == "Bone")]
dat_bone_hum = subset(dat_bone_curr, bone == "Humerus")
dat_bone_uln = subset(dat_bone_curr, bone == "Ulna")
dat_bone_rad = subset(dat_bone_curr, bone == "Radius")
dat_bone_car = subset(dat_bone_curr, bone == "Carpometacarpus")
hum       = massprop_bones(dat_bone_hum$bone_mass,dat_bone_hum$bone_len,dat_bone_hum$bone_out_rad,dat_bone_hum$bone_in_rad,rho_bone, Pt1, Pt2)
ulna      = massprop_bones(dat_bone_uln$bone_mass,dat_bone_uln$bone_len,dat_bone_uln$bone_out_rad,dat_bone_uln$bone_in_rad,rho_bone, Pt2, Pt3)
radius    = massprop_bones(dat_bone_rad$bone_mass,dat_bone_rad$bone_len,dat_bone_rad$bone_out_rad,dat_bone_rad$bone_in_rad,rho_bone, Pt2, Pt3)
car       = massprop_bones(dat_bone_car$bone_mass,dat_bone_car$bone_len,dat_bone_car$bone_out_rad,dat_bone_car$bone_in_rad,rho_bone, Pt3, Pt4)
wristbone = massprop_pm((subset(dat_bone_curr, bone == "Ulnare")$bone_mass + subset(dat_bone_curr, bone == "Radiale")$bone_mass), Pt3)
# --- All Bones ---
prop_bone = list()
# simply addition as long as about the same origin in the same frame of reference (Frame of reference: VRP | Origin: VRP)
prop_bone$I  = hum$I + ulna$I + radius$I + car$I + wristbone$I
# weighted average of the individual center of mass (Frame of reference: VRP | Origin: VRP)
prop_bone$CG = (dat_bone_hum$bone_mass*hum$CG + dat_bone_uln$bone_mass*ulna$CG + dat_bone_rad$bone_mass*radius$CG + dat_bone_car$bone_mass*car$CG + (subset(dat_bone_curr, bone == "Ulnare")$bone_mass + subset(dat_bone_curr, bone == "Radiale")$bone_mass)*wristbone$CG)/sum(dat_bone_curr$bone_mass)
prop_bone$m  = sum(dat_bone_curr$bone_mass)
# ----------------------------------------------------
# --------------- Muscle Data ------------------------
# ----------------------------------------------------
rho_muscle      = dat_mat$density[which(dat_mat$material == "Muscle")]
mass_muscles    = c()
mass_muscles[1] = dat_bird_curr$brachial_muscle_mass
mass_muscles[2] = dat_bird_curr$antebrachial_muscle_mass
mass_muscles[3] = dat_bird_curr$manus_muscle_mass
brach  = massprop_muscles(mass_muscles[1],rho_muscle,Pt1,Pt2)
abrach = massprop_muscles(mass_muscles[2],rho_muscle,Pt2,Pt3)
manus  = massprop_muscles(mass_muscles[3],rho_muscle,Pt3,Pt4)
# --- All Muscles ---
prop_muscles = list()
# simply addition as long as about the same origin in the same frame of reference (Frame of reference: VRP | Origin: VRP)
prop_muscles$I  = brach$I + abrach$I + manus$I
# weighted average of the individual center of mass (Frame of reference: VRP | Origin: VRP)
prop_muscles$CG = (mass_muscles[1]*brach$CG + mass_muscles[2]*abrach$CG + mass_muscles[3]*manus$CG)/sum(mass_muscles)
prop_muscles$m  = sum(mass_muscles)
# ---------------------------------------------------------
# --------------- Skin/Covert Data ------------------------
# ---------------------------------------------------------
rho_skin     = dat_mat$density[which(dat_mat$material == "Skin")]
mass_skin    = c()
mass_skin[1] = dat_bird_curr$propatagiale_skin_mass
mass_skin[2] = dat_bird_curr$manus_skin_mass
skin_prop    = massprop_skin(mass_skin[1],rho_skin,rbind(Pt1,Pt3,Pt2))
skin_man     = massprop_skin(mass_skin[2],rho_skin,rbind(Pt3,Pt4,Pt2))
# --- All Skin ---
prop_skin = list()
# simply addition as long as about the same origin in the same frame of reference (Frame of reference: VRP | Origin: VRP)
prop_skin$I  = skin_prop$I + skin_man$I
# weighted average of the individual center of mass (Frame of reference: VRP | Origin: VRP)
prop_skin$CG = (mass_skin[1]*skin_prop$CG + mass_skin[2]*skin_man$CG)/sum(mass_skin)
prop_skin$m  = sum(mass_skin)
# -------------------------------------------------------
# ----------------- Feather Data ------------------------
# -------------------------------------------------------
# density information
rho_cor = dat_mat$density[which(dat_mat$material == "Cortex")]
rho_med = dat_mat$density[which(dat_mat$material == "Medullary")]
# separate out primaries and secondaries
primaries   = dat_feat_curr[grep("P",dat_feat_curr$feather),]
secondaries = dat_feat_curr[grep("S",dat_feat_curr$feather),]
no_sec = length(secondaries$feather)
no_pri = length(primaries$feather)
#pre-define storage matrices
res_pri     = list()
res_pri$I   = array(dim = c(3,3,no_pri))
res_pri$CG  = array(dim = c(no_pri,3))
res_pri$CGm = array(dim = c(no_pri,3))
res_sec     = list()
res_sec$I   = array(dim = c(3,3,no_sec))
res_sec$CG  = array(dim = c(no_sec,3))
res_sec$CGm = array(dim = c(no_sec,3))
# determine the orientation and normal of each feather
feather_info = orient_feather(no_pri,no_sec,Pt1,Pt2,Pt3,Pt4,Pt9,Pt10,Pt11)
# --- Primaries ---
for (i in 1:no_pri){
feather_name = paste("P",i,sep = "")
pri_info = subset(dat_feat_curr,feather == feather_name) # subset data to be for this specific feather
# Calculate MOI and CG
tmp = massprop_feathers(pri_info$m_f,pri_info$l_cal,pri_info$l_vane, pri_info$w_cal,
dat_bird_curr$barb_radius, dat_bird_curr$barb_distance,
rho_cor,rho_med,
pri_info$w_vp,pri_info$w_vd,pri_info$vane_angle,
feather_info$loc_start[i,],feather_info$loc_end[i,],feather_info$normal[i,])
# Save MOI, CG and CG*mass
res_pri$I[,,i] = tmp$I
res_pri$CG[i,] = tmp$CG
res_pri$CGm[i,] = tmp$CG*pri_info$m_f
}
# --- Secondaries ---
for (i in 1:no_sec){
feather_name = paste("S",i,sep = "")
sec_info = subset(dat_feat_curr,feather == feather_name)  # subset data to be for this specific feather
# Calculate MOI and CG
tmp = massprop_feathers(sec_info$m_f,sec_info$l_cal,sec_info$l_vane, sec_info$w_cal,
dat_bird_curr$barb_radius, dat_bird_curr$barb_distance,
rho_cor,rho_med,
sec_info$w_vp,sec_info$w_vd,sec_info$vane_angle,
feather_info$loc_start[i+no_pri,],feather_info$loc_end[i+no_pri,],feather_info$normal[i+no_pri,])
# Save MOI, CG and CG*mass
res_sec$I[,,i] = tmp$I
res_sec$CG[i,] = tmp$CG
res_sec$CGm[i,] = tmp$CG*sec_info$m_f
}
# --- Alula ----
m_alula = subset(dat_feat_curr,feather == "alula")$m_f
alula   = massprop_pm(m_alula, Pt3)
# --- All Feathers ---
prop_feathers = list()
prop_feathers$I  = rbind(rowSums(res_pri$I[,1,]),rowSums(res_pri$I[,2,]),rowSums(res_pri$I[,3,]))
prop_feathers$CG = (colSums(res_pri$CGm) + colSums(res_sec$CGm) + alula$CG*m_alula)/sum(dat_feat_curr$m_f)
prop_feathers$m  = sum(dat_feat_curr$m_f)
# ----------------------------------------------------
# ----------------- Save Data ------------------------
# ----------------------------------------------------
# add data to bone specific data frame
mass_properties_bone = store_data(dat_wingID_curr,hum,mass_properties_bone,"humerus")
mass_properties_bone = store_data(dat_wingID_curr,ulna,mass_properties_bone,"ulna")
mass_properties_bone = store_data(dat_wingID_curr,radius,mass_properties_bone,"radius")
mass_properties_bone = store_data(dat_wingID_curr,car,mass_properties_bone,"carpo")
mass_properties_bone = store_data(dat_wingID_curr,wristbone,mass_properties_bone,"wristbones")
# add data to muscle specific data frame
mass_properties_muscle = store_data(dat_wingID_curr,brach,mass_properties_muscle,"brach")
mass_properties_muscle = store_data(dat_wingID_curr,abrach,mass_properties_muscle,"abrach")
mass_properties_muscle = store_data(dat_wingID_curr,manus,mass_properties_muscle,"manus")
# add data to muscle specific data frame
mass_properties_skin = store_data(dat_wingID_curr,skin_prop,mass_properties_skin,"skin_prop")
mass_properties_skin = store_data(dat_wingID_curr,skin_man,mass_properties_skin,"skin_man")
# add data to bone specific data frame
# --- Primaries ---
for (i in 1:no_pri){
feather_name = paste("P",i,sep = "")
curr_res_pri = list()
curr_res_pri$I  = res_pri$I[,,i]
curr_res_pri$CG = res_pri$CG[i,]
mass_properties_feathers = store_data(dat_wingID_curr,curr_res_pri,mass_properties_feathers,feather_name)
}
# --- Primaries ---
for (i in 1:no_sec){
feather_name = paste("S",i,sep = "")
curr_res_sec = list()
curr_res_sec$I  = res_sec$I[,,i]
curr_res_sec$CG = res_sec$CG[i,]
mass_properties_feathers = store_data(dat_wingID_curr,curr_res_sec,mass_properties_feathers,feather_name)
}
# save all combined data groups to the master list
mass_properties      = store_data(dat_wingID_curr,prop_bone,mass_properties,"bones")
mass_properties      = store_data(dat_wingID_curr,prop_muscles,mass_properties,"muscles")
mass_properties      = store_data(dat_wingID_curr,prop_skin,mass_properties,"skin")
mass_properties      = store_data(dat_wingID_curr,prop_feathers,mass_properties,"feathers")
# save all wing data
prop_bird    = list()
prop_bird$I  = prop_bone$I + prop_muscles$I + prop_skin$I + prop_feathers$I
prop_bird$m  = prop_bone$m + prop_muscles$m + prop_skin$m + prop_feathers$m
prop_bird$CG = (prop_bone$CG*prop_bone$m + prop_muscles$CG*prop_muscles$m + prop_skin$CG*prop_skin$m + prop_feathers$CG*prop_feathers$m)/prop_bird$m
mass_properties  = store_data(dat_wingID_curr,prop_bird,mass_properties,"wing")
# save the final mass used for the analysis
new_row = data.frame(species = dat_wingID_curr$species, WingID = as.character(dat_wingID_curr$WingID),
TestID = as.character(dat_wingID_curr$TestID), FrameID = as.character(dat_wingID_curr$frameID),
component = "wing", object = "m", value = prop_bird$m) # saves the name and valueof the tensor component
mass_properties = rbind(mass_properties,new_row)
CGplot <- ggplot() +
#add in data
geom_point(aes(x=subset(mass_properties_skin, object == "CGy")$value, y=subset(mass_properties_skin, object == "CGx")$value), col = "gray") +
geom_point(aes(x=subset(mass_properties_bone, object == "CGy")$value, y=subset(mass_properties_bone, object == "CGx")$value), col = "yellow") +
geom_point(aes(x=subset(mass_properties_feathers, object == "CGy")$value, y=subset(mass_properties_feathers, object == "CGx")$value), col = "blue") +
geom_point(aes(x=subset(mass_properties_muscle, object == "CGy")$value, y=subset(mass_properties_muscle, object == "CGx")$value), col = "red") +
geom_point(aes(x=subset(mass_properties, object == "CGy")$value, y=subset(mass_properties, object == "CGx")$value), col = "green") +
geom_point(aes(x=clean_pts[,2], y=clean_pts[,1]), col = "black")
CGplot
sec_info$m_f
dat_feat_curr
View(dat_feat_curr)
View(mass_properties)
View(dat_feat_curr)
CGplot <- ggplot() +
#add in data
geom_point(aes(x=subset(mass_properties_skin, object == "CGy")$value, y=subset(mass_properties_skin, object == "CGz")$value), col = "gray") +
geom_point(aes(x=subset(mass_properties_bone, object == "CGy")$value, y=subset(mass_properties_bone, object == "CGz")$value), col = "yellow") +
geom_point(aes(x=subset(mass_properties_feathers, object == "CGy")$value, y=subset(mass_properties_feathers, object == "CGz")$value), col = "blue") +
geom_point(aes(x=subset(mass_properties_muscle, object == "CGy")$value, y=subset(mass_properties_muscle, object == "CGz")$value), col = "red") +
geom_point(aes(x=subset(mass_properties, object == "CGy")$value, y=subset(mass_properties, object == "CGz")$value), col = "green") +
geom_point(aes(x=clean_pts[,2], y=clean_pts[,3]), col = "black")
CGplot
CGplot <- ggplot() +
#add in data
geom_point(aes(x=subset(mass_properties_skin, object == "CGy")$value, y=subset(mass_properties_skin, object == "CGx")$value), col = "gray") +
geom_point(aes(x=subset(mass_properties_bone, object == "CGy")$value, y=subset(mass_properties_bone, object == "CGx")$value), col = "yellow") +
geom_point(aes(x=subset(mass_properties_feathers, object == "CGy")$value, y=subset(mass_properties_feathers, object == "CGx")$value), col = "blue") +
geom_point(aes(x=subset(mass_properties_muscle, object == "CGy")$value, y=subset(mass_properties_muscle, object == "CGx")$value), col = "red") +
geom_point(aes(x=subset(mass_properties, object == "CGy")$value, y=subset(mass_properties, object == "CGx")$value), col = "green") +
geom_point(aes(x=clean_pts[,2], y=clean_pts[,3]), col = "black")
CGplot
CGplot <- ggplot() +
#add in data
geom_point(aes(x=subset(mass_properties_skin, object == "CGy")$value, y=subset(mass_properties_skin, object == "CGx")$value), col = "gray") +
geom_point(aes(x=subset(mass_properties_bone, object == "CGy")$value, y=subset(mass_properties_bone, object == "CGx")$value), col = "yellow") +
geom_point(aes(x=subset(mass_properties_feathers, object == "CGy")$value, y=subset(mass_properties_feathers, object == "CGx")$value), col = "blue") +
geom_point(aes(x=subset(mass_properties_muscle, object == "CGy")$value, y=subset(mass_properties_muscle, object == "CGx")$value), col = "red") +
geom_point(aes(x=subset(mass_properties, object == "CGy")$value, y=subset(mass_properties, object == "CGx")$value), col = "green") +
geom_point(aes(x=clean_pts[,2], y=clean_pts[,1]), col = "black")
CGplot
feather_info$loc_end
feather_info$loc_start
feather_info$normal
View(dat_feat_curr)
pracma::cross((Pt2-Pt3),(feather$loc_end[11,]-Pt3))
pracma::cross((Pt2-Pt3),(feather_info$loc_end[11,]-Pt3))
pracma::cross((Pt3-Pt4),(feather_info$loc_end[11,]-Pt4))
View(mass_properties_feathers)
# This script is written to create the test cases
devtools::load_all()
# --------------------- Read in data -----------------------
alldat   = read.csv('./data/2020_05_25_OrientedWings.csv')
dat_bird = readxl::read_xlsx('./data/Master_AnatomicalData.xlsx', sheet = 'FullBird')
dat_bone = readxl::read_xlsx('./data/Master_AnatomicalData.xlsx', sheet = 'Bones')
dat_feat = readxl::read_xlsx('./data/Master_AnatomicalData.xlsx', sheet = 'Feathers')
dat_mat  = readxl::read_xlsx('./data/Master_AnatomicalData.xlsx', sheet = 'MaterialSpecs')
# adjust to SI units
dat_feat$l_cal  = 0.01*dat_feat$l_cal
dat_feat$l_vane = 0.01*dat_feat$l_vane
dat_feat$w_cal  = 0.01*dat_feat$w_cal
dat_feat$w_vp   = 0.01*dat_feat$w_vp
dat_feat$w_vd   = 0.01*dat_feat$w_vd
dat_feat$m_f    = 0.001*dat_feat$m_f
no_species = unique(dat_bird$species)
# eventually replace with length(dat_bird$species)
for (species in 1:1){
# ----------- Filter the data to the current species ---------
species_curr  = dat_bird$species[species]
alldat_curr   = subset(alldat, species == species_curr & sweep == 0 & dihedral == 0)
dat_bird_curr = subset(dat_bird, species == species_curr)
dat_bone_curr = subset(dat_bone, species == species_curr)
dat_feat_curr = subset(dat_feat, species == species_curr)
dat_pt = alldat_curr[,8:43]
# --------------- Clean up incoming data --------------------
# CAUTION:   The read in data has the origin at the RH humeral head. Pt1X, Pt1Y, Pt1Z = 0
#            It is critical that the data is given in the structural
#            frame of reference with the origin at the vehicle reference
#            point (VRP). VRP is assumed to be in the center of the body
#            on the y axis between the two humerus bones
w_sk = 0.045*(dat_bird_curr$total_bird_mass^0.37); # predicted distance between humerus heads (Nudds & Rayner)
for (i in 1:length(colnames(dat_pt))){
if (grepl("Y",colnames(dat_pt)[i],fixed=TRUE)){
dat_pt[,i] = dat_pt[,i] + w_sk/2
}
}
# --------------------- Initialize variables -----------------------
all_data = as.data.frame(matrix(0, nrow = 0, ncol = 7)) # overall data
column_names = c("species","WingID","TestID","FrameID","prop_type","component","value")
colnames(all_data) = column_names
# -------------- Begin iteration through the wings of this species ------------------------------
for (ind_wing in 1:length(alldat_curr$frameID)){
dat_pt_curr = dat_pt[ind_wing,] # should only be one row of input points
# Initialize common pts
Pt1  = c(dat_pt_curr$Pt1X, dat_pt_curr$Pt1Y, dat_pt_curr$Pt1Z) # Shoulder
Pt2  = c(dat_pt_curr$Pt2X, dat_pt_curr$Pt2Y, dat_pt_curr$Pt2Z) # Elbow
Pt3  = c(dat_pt_curr$Pt3X, dat_pt_curr$Pt3Y, dat_pt_curr$Pt3Z) # Wrist
Pt4  = c(dat_pt_curr$Pt4X, dat_pt_curr$Pt4Y, dat_pt_curr$Pt4Z) # End of carpometacarpus
Pt8  = c(dat_pt_curr$Pt8X, dat_pt_curr$Pt8Y, dat_pt_curr$Pt8Z) # Tip of most distal primary
Pt9  = c(dat_pt_curr$Pt9X, dat_pt_curr$Pt9Y, dat_pt_curr$Pt9Z) # Tip of last primary to model as if on the end of the carpometacarpus
Pt10 = c(dat_pt_curr$Pt10X, dat_pt_curr$Pt10Y, dat_pt_curr$Pt10Z) # S1
Pt11 = c(dat_pt_curr$Pt11X, dat_pt_curr$Pt11Y, dat_pt_curr$Pt11Z) # Wing root trailing edge
clean_pts = rbind(Pt1,Pt2,Pt3,Pt4,Pt8,Pt9,Pt10,Pt11)
curr_data = massprop_birdwing(alldat_curr[ind_wing,], dat_bird_curr, dat_bone_curr, dat_feat_curr, dat_mat, clean_pts)
all_data = rbind(all_data, curr_data)
}
}
# ------------- Check how the elbow and wrist affects the mass properties of the wing -----------------
clean_dat <- subset(alldat, sweep == 0 & dihedral == 0)[,c(3,4,5,44,45,46)]
full_results <- merge(all_data, clean_dat, all.x = TRUE, by.x = c("species","WingID","TestID","FrameID"), by.y = c("species","WingID","TestID","frameID"))
plot(subset(full_results, component == "wing" & object == "Ixz")$elbow,subset(full_results, component == "wing" & object == "Ixz")$value-subset(full_results, component == "wing" & object == "Iyy")$value)
plot(subset(full_results, component == "wing" & object == "Ixz")$elbow,subset(full_results, component == "wing" & object == "Ixz")$value)
plot(subset(full_results, component == "wing" & object == "Ixx")$elbow,subset(full_results, component == "wing" & object == "Ixx")$value)
plot(subset(full_results, component == "wing" & object == "Ixx")$manus,subset(full_results, component == "wing" & object == "Iyy")$value)
plot(subset(full_results, component == "wing" & object == "Ixx")$manus,subset(full_results, component == "wing" & object == "Ixx")$value)
plot(subset(full_results, component == "wing" & object == "Ixx")$manus,subset(full_results, component == "wing" & object == "Izz")$value)
plot(subset(full_results, component == "wing" & object == "Ixx")$elbow,subset(full_results, component == "wing" & object == "Izz")$value)
plot(subset(full_results, component == "wing" & object == "Ixx")$elbow,subset(full_results, component == "wing" & object == "Iyy")$value)
